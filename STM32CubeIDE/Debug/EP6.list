
EP6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005050  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800510c  0800510c  0000610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051dc  080051dc  00007018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080051dc  080051dc  000061dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051e4  080051e4  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e4  080051e4  000061e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051e8  080051e8  000061e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080051ec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000018  08005204  00007018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08005204  000071c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c69e  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020bd  00000000  00000000  000136de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  000157a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000725  00000000  00000000  000160f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001750e  00000000  00000000  0001681d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d81e  00000000  00000000  0002dd2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093382  00000000  00000000  0003b549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce8cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fa0  00000000  00000000  000ce910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d08b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080050f4 	.word	0x080050f4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	080050f4 	.word	0x080050f4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000622:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <MX_DMA_Init+0x48>)
 8000624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000626:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_DMA_Init+0x48>)
 8000628:	2101      	movs	r1, #1
 800062a:	430a      	orrs	r2, r1
 800062c:	639a      	str	r2, [r3, #56]	@ 0x38
 800062e:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <MX_DMA_Init+0x48>)
 8000630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000632:	2201      	movs	r2, #1
 8000634:	4013      	ands	r3, r2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	2009      	movs	r0, #9
 8000640:	f000 fbdc 	bl	8000dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000644:	2009      	movs	r0, #9
 8000646:	f000 fbee 	bl	8000e26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	200a      	movs	r0, #10
 8000650:	f000 fbd4 	bl	8000dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000654:	200a      	movs	r0, #10
 8000656:	f000 fbe6 	bl	8000e26 <HAL_NVIC_EnableIRQ>

}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	40021000 	.word	0x40021000

08000668 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <MX_GPIO_Init+0x28>)
 8000670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000672:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <MX_GPIO_Init+0x28>)
 8000674:	2101      	movs	r1, #1
 8000676:	430a      	orrs	r2, r1
 8000678:	635a      	str	r2, [r3, #52]	@ 0x34
 800067a:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <MX_GPIO_Init+0x28>)
 800067c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800067e:	2201      	movs	r2, #1
 8000680:	4013      	ands	r3, r2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b002      	add	sp, #8
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	40021000 	.word	0x40021000

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fa5a 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f830 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f7ff ffe2 	bl	8000668 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a4:	f7ff ffba 	bl	800061c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006a8:	f000 f912 	bl	80008d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2,u8TxBuffer, 10, 100);
 80006ac:	490f      	ldr	r1, [pc, #60]	@ (80006ec <main+0x58>)
 80006ae:	4810      	ldr	r0, [pc, #64]	@ (80006f0 <main+0x5c>)
 80006b0:	2364      	movs	r3, #100	@ 0x64
 80006b2:	220a      	movs	r2, #10
 80006b4:	f002 f836 	bl	8002724 <HAL_UART_Transmit>
  HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, UartCallback);
 80006b8:	4a0e      	ldr	r2, [pc, #56]	@ (80006f4 <main+0x60>)
 80006ba:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <main+0x5c>)
 80006bc:	2103      	movs	r1, #3
 80006be:	0018      	movs	r0, r3
 80006c0:	f001 ff80 	bl	80025c4 <HAL_UART_RegisterCallback>
#ifdef USE_IT
  HAL_UART_Receive_IT(&huart2, u8RxBuffer, 1);
#else
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8RxBuffer, 10);
 80006c4:	490c      	ldr	r1, [pc, #48]	@ (80006f8 <main+0x64>)
 80006c6:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <main+0x5c>)
 80006c8:	220a      	movs	r2, #10
 80006ca:	0018      	movs	r0, r3
 80006cc:	f004 fc20 	bl	8004f10 <HAL_UARTEx_ReceiveToIdle_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit_DMA(&huart2, (uint8_t *) "Hacker Transmit\r\n", sizeof("Hacker Transmit\r\n"));
 80006d0:	490a      	ldr	r1, [pc, #40]	@ (80006fc <main+0x68>)
 80006d2:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <main+0x5c>)
 80006d4:	2212      	movs	r2, #18
 80006d6:	0018      	movs	r0, r3
 80006d8:	f002 f926 	bl	8002928 <HAL_UART_Transmit_DMA>
	  HAL_Delay(500);
 80006dc:	23fa      	movs	r3, #250	@ 0xfa
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fabb 	bl	8000c5c <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart2, (uint8_t *) "Hacker Transmit\r\n", sizeof("Hacker Transmit\r\n"));
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	e7f2      	b.n	80006d0 <main+0x3c>
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	20000000 	.word	0x20000000
 80006f0:	20000040 	.word	0x20000040
 80006f4:	080007dd 	.word	0x080007dd
 80006f8:	20000034 	.word	0x20000034
 80006fc:	0800510c 	.word	0x0800510c

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b093      	sub	sp, #76	@ 0x4c
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	2410      	movs	r4, #16
 8000708:	193b      	adds	r3, r7, r4
 800070a:	0018      	movs	r0, r3
 800070c:	2338      	movs	r3, #56	@ 0x38
 800070e:	001a      	movs	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f004 fcc3 	bl	800509c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000716:	003b      	movs	r3, r7
 8000718:	0018      	movs	r0, r3
 800071a:	2310      	movs	r3, #16
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f004 fcbc 	bl	800509c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	2380      	movs	r3, #128	@ 0x80
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	0018      	movs	r0, r3
 800072a:	f001 f81b 	bl	8001764 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2202      	movs	r2, #2
 8000732:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2280      	movs	r2, #128	@ 0x80
 8000738:	0052      	lsls	r2, r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800073c:	0021      	movs	r1, r4
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2240      	movs	r2, #64	@ 0x40
 8000748:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2202      	movs	r2, #2
 800074e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2202      	movs	r2, #2
 8000754:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2208      	movs	r2, #8
 8000760:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2280      	movs	r2, #128	@ 0x80
 8000766:	0292      	lsls	r2, r2, #10
 8000768:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2280      	movs	r2, #128	@ 0x80
 800076e:	0492      	lsls	r2, r2, #18
 8000770:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2280      	movs	r2, #128	@ 0x80
 8000776:	0592      	lsls	r2, r2, #22
 8000778:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	187b      	adds	r3, r7, r1
 800077c:	0018      	movs	r0, r3
 800077e:	f001 f83d 	bl	80017fc <HAL_RCC_OscConfig>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000786:	f000 f83b 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	003b      	movs	r3, r7
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	003b      	movs	r3, r7
 8000792:	2202      	movs	r2, #2
 8000794:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	003b      	movs	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079c:	003b      	movs	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a2:	003b      	movs	r3, r7
 80007a4:	2102      	movs	r1, #2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f001 fb42 	bl	8001e30 <HAL_RCC_ClockConfig>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007b0:	f000 f826 	bl	8000800 <Error_Handler>
  }
}
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b013      	add	sp, #76	@ 0x4c
 80007ba:	bd90      	pop	{r4, r7, pc}

080007bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, u8RxBuffer, 10);
 80007c4:	4904      	ldr	r1, [pc, #16]	@ (80007d8 <HAL_UART_RxCpltCallback+0x1c>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	220a      	movs	r2, #10
 80007ca:	0018      	movs	r0, r3
 80007cc:	f002 f84e 	bl	800286c <HAL_UART_Receive_IT>
}
 80007d0:	46c0      	nop			@ (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b002      	add	sp, #8
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000034 	.word	0x20000034

080007dc <UartCallback>:

void UartCallback(UART_HandleTypeDef *huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8RxBuffer, 10);
 80007e4:	4904      	ldr	r1, [pc, #16]	@ (80007f8 <UartCallback+0x1c>)
 80007e6:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <UartCallback+0x20>)
 80007e8:	220a      	movs	r2, #10
 80007ea:	0018      	movs	r0, r3
 80007ec:	f004 fb90 	bl	8004f10 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b002      	add	sp, #8
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000034 	.word	0x20000034
 80007fc:	20000040 	.word	0x20000040

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	e7fd      	b.n	8000808 <Error_Handler+0x8>

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <HAL_MspInit+0x44>)
 8000814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <HAL_MspInit+0x44>)
 8000818:	2101      	movs	r1, #1
 800081a:	430a      	orrs	r2, r1
 800081c:	641a      	str	r2, [r3, #64]	@ 0x40
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <HAL_MspInit+0x44>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000822:	2201      	movs	r2, #1
 8000824:	4013      	ands	r3, r2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <HAL_MspInit+0x44>)
 800082c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <HAL_MspInit+0x44>)
 8000830:	2180      	movs	r1, #128	@ 0x80
 8000832:	0549      	lsls	r1, r1, #21
 8000834:	430a      	orrs	r2, r1
 8000836:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000838:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <HAL_MspInit+0x44>)
 800083a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800083c:	2380      	movs	r3, #128	@ 0x80
 800083e:	055b      	lsls	r3, r3, #21
 8000840:	4013      	ands	r3, r2
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	40021000 	.word	0x40021000

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000858:	46c0      	nop			@ (mov r8, r8)
 800085a:	e7fd      	b.n	8000858 <NMI_Handler+0x4>

0800085c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000860:	46c0      	nop			@ (mov r8, r8)
 8000862:	e7fd      	b.n	8000860 <HardFault_Handler+0x4>

08000864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f000 f9d2 	bl	8000c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800088c:	4b03      	ldr	r3, [pc, #12]	@ (800089c <DMA1_Channel1_IRQHandler+0x14>)
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fcc2 	bl	8001218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000894:	46c0      	nop			@ (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	2000010c 	.word	0x2000010c

080008a0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80008a4:	4b03      	ldr	r3, [pc, #12]	@ (80008b4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 fcb6 	bl	8001218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	20000168 	.word	0x20000168

080008b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008bc:	4b03      	ldr	r3, [pc, #12]	@ (80008cc <USART2_IRQHandler+0x14>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f002 f8c4 	bl	8002a4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008c4:	46c0      	nop			@ (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	20000040 	.word	0x20000040

080008d0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d4:	4b23      	ldr	r3, [pc, #140]	@ (8000964 <MX_USART2_UART_Init+0x94>)
 80008d6:	4a24      	ldr	r2, [pc, #144]	@ (8000968 <MX_USART2_UART_Init+0x98>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008da:	4b22      	ldr	r3, [pc, #136]	@ (8000964 <MX_USART2_UART_Init+0x94>)
 80008dc:	22e1      	movs	r2, #225	@ 0xe1
 80008de:	0252      	lsls	r2, r2, #9
 80008e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b20      	ldr	r3, [pc, #128]	@ (8000964 <MX_USART2_UART_Init+0x94>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <MX_USART2_UART_Init+0x94>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <MX_USART2_UART_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_USART2_UART_Init+0x94>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_USART2_UART_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_USART2_UART_Init+0x94>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_USART2_UART_Init+0x94>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_USART2_UART_Init+0x94>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_USART2_UART_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_USART2_UART_Init+0x94>)
 800091a:	0018      	movs	r0, r3
 800091c:	f001 fdea 	bl	80024f4 <HAL_UART_Init>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000924:	f7ff ff6c 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000928:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <MX_USART2_UART_Init+0x94>)
 800092a:	2100      	movs	r1, #0
 800092c:	0018      	movs	r0, r3
 800092e:	f004 fa6d 	bl	8004e0c <HAL_UARTEx_SetTxFifoThreshold>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000936:	f7ff ff63 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093a:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <MX_USART2_UART_Init+0x94>)
 800093c:	2100      	movs	r1, #0
 800093e:	0018      	movs	r0, r3
 8000940:	f004 faa4 	bl	8004e8c <HAL_UARTEx_SetRxFifoThreshold>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000948:	f7ff ff5a 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800094c:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <MX_USART2_UART_Init+0x94>)
 800094e:	0018      	movs	r0, r3
 8000950:	f004 fa22 	bl	8004d98 <HAL_UARTEx_DisableFifoMode>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000958:	f7ff ff52 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	20000040 	.word	0x20000040
 8000968:	40004400 	.word	0x40004400

0800096c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b097      	sub	sp, #92	@ 0x5c
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	2344      	movs	r3, #68	@ 0x44
 8000976:	18fb      	adds	r3, r7, r3
 8000978:	0018      	movs	r0, r3
 800097a:	2314      	movs	r3, #20
 800097c:	001a      	movs	r2, r3
 800097e:	2100      	movs	r1, #0
 8000980:	f004 fb8c 	bl	800509c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000984:	2410      	movs	r4, #16
 8000986:	193b      	adds	r3, r7, r4
 8000988:	0018      	movs	r0, r3
 800098a:	2334      	movs	r3, #52	@ 0x34
 800098c:	001a      	movs	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	f004 fb84 	bl	800509c <memset>
  if(uartHandle->Instance==USART2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a50      	ldr	r2, [pc, #320]	@ (8000adc <HAL_UART_MspInit+0x170>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d000      	beq.n	80009a0 <HAL_UART_MspInit+0x34>
 800099e:	e099      	b.n	8000ad4 <HAL_UART_MspInit+0x168>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	2202      	movs	r2, #2
 80009a4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	0018      	movs	r0, r3
 80009b0:	f001 fbe8 	bl	8002184 <HAL_RCCEx_PeriphCLKConfig>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80009b8:	f7ff ff22 	bl	8000800 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009bc:	4b48      	ldr	r3, [pc, #288]	@ (8000ae0 <HAL_UART_MspInit+0x174>)
 80009be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009c0:	4b47      	ldr	r3, [pc, #284]	@ (8000ae0 <HAL_UART_MspInit+0x174>)
 80009c2:	2180      	movs	r1, #128	@ 0x80
 80009c4:	0289      	lsls	r1, r1, #10
 80009c6:	430a      	orrs	r2, r1
 80009c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009ca:	4b45      	ldr	r3, [pc, #276]	@ (8000ae0 <HAL_UART_MspInit+0x174>)
 80009cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009ce:	2380      	movs	r3, #128	@ 0x80
 80009d0:	029b      	lsls	r3, r3, #10
 80009d2:	4013      	ands	r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b41      	ldr	r3, [pc, #260]	@ (8000ae0 <HAL_UART_MspInit+0x174>)
 80009da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009dc:	4b40      	ldr	r3, [pc, #256]	@ (8000ae0 <HAL_UART_MspInit+0x174>)
 80009de:	2101      	movs	r1, #1
 80009e0:	430a      	orrs	r2, r1
 80009e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80009e4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ae0 <HAL_UART_MspInit+0x174>)
 80009e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009e8:	2201      	movs	r2, #1
 80009ea:	4013      	ands	r3, r2
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f0:	2144      	movs	r1, #68	@ 0x44
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	220c      	movs	r2, #12
 80009f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2202      	movs	r2, #2
 80009fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	187a      	adds	r2, r7, r1
 8000a12:	23a0      	movs	r3, #160	@ 0xa0
 8000a14:	05db      	lsls	r3, r3, #23
 8000a16:	0011      	movs	r1, r2
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f000 fd3f 	bl	800149c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000a1e:	4b31      	ldr	r3, [pc, #196]	@ (8000ae4 <HAL_UART_MspInit+0x178>)
 8000a20:	4a31      	ldr	r2, [pc, #196]	@ (8000ae8 <HAL_UART_MspInit+0x17c>)
 8000a22:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000a24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae4 <HAL_UART_MspInit+0x178>)
 8000a26:	2234      	movs	r2, #52	@ 0x34
 8000a28:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae4 <HAL_UART_MspInit+0x178>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae4 <HAL_UART_MspInit+0x178>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae4 <HAL_UART_MspInit+0x178>)
 8000a38:	2280      	movs	r2, #128	@ 0x80
 8000a3a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a3c:	4b29      	ldr	r3, [pc, #164]	@ (8000ae4 <HAL_UART_MspInit+0x178>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a42:	4b28      	ldr	r3, [pc, #160]	@ (8000ae4 <HAL_UART_MspInit+0x178>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a48:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <HAL_UART_MspInit+0x178>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a4e:	4b25      	ldr	r3, [pc, #148]	@ (8000ae4 <HAL_UART_MspInit+0x178>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a54:	4b23      	ldr	r3, [pc, #140]	@ (8000ae4 <HAL_UART_MspInit+0x178>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 fa02 	bl	8000e60 <HAL_DMA_Init>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000a60:	f7ff fece 	bl	8000800 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2180      	movs	r1, #128	@ 0x80
 8000a68:	4a1e      	ldr	r2, [pc, #120]	@ (8000ae4 <HAL_UART_MspInit+0x178>)
 8000a6a:	505a      	str	r2, [r3, r1]
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae4 <HAL_UART_MspInit+0x178>)
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8000a72:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <HAL_UART_MspInit+0x180>)
 8000a74:	4a1e      	ldr	r2, [pc, #120]	@ (8000af0 <HAL_UART_MspInit+0x184>)
 8000a76:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000a78:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <HAL_UART_MspInit+0x180>)
 8000a7a:	2235      	movs	r2, #53	@ 0x35
 8000a7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <HAL_UART_MspInit+0x180>)
 8000a80:	2210      	movs	r2, #16
 8000a82:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a84:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <HAL_UART_MspInit+0x180>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a8a:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <HAL_UART_MspInit+0x180>)
 8000a8c:	2280      	movs	r2, #128	@ 0x80
 8000a8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a90:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <HAL_UART_MspInit+0x180>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <HAL_UART_MspInit+0x180>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a9c:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <HAL_UART_MspInit+0x180>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000aa2:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <HAL_UART_MspInit+0x180>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000aa8:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <HAL_UART_MspInit+0x180>)
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 f9d8 	bl	8000e60 <HAL_DMA_Init>
 8000ab0:	1e03      	subs	r3, r0, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 8000ab4:	f7ff fea4 	bl	8000800 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a0c      	ldr	r2, [pc, #48]	@ (8000aec <HAL_UART_MspInit+0x180>)
 8000abc:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000abe:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <HAL_UART_MspInit+0x180>)
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	201c      	movs	r0, #28
 8000aca:	f000 f997 	bl	8000dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ace:	201c      	movs	r0, #28
 8000ad0:	f000 f9a9 	bl	8000e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ad4:	46c0      	nop			@ (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b017      	add	sp, #92	@ 0x5c
 8000ada:	bd90      	pop	{r4, r7, pc}
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	2000010c 	.word	0x2000010c
 8000ae8:	40020008 	.word	0x40020008
 8000aec:	20000168 	.word	0x20000168
 8000af0:	4002001c 	.word	0x4002001c

08000af4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000af4:	480d      	ldr	r0, [pc, #52]	@ (8000b2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000af6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000af8:	f000 f825 	bl	8000b46 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000afc:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000afe:	490d      	ldr	r1, [pc, #52]	@ (8000b34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b00:	4a0d      	ldr	r2, [pc, #52]	@ (8000b38 <LoopForever+0xe>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b14:	4c0a      	ldr	r4, [pc, #40]	@ (8000b40 <LoopForever+0x16>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b22:	f004 fac3 	bl	80050ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b26:	f7ff fdb5 	bl	8000694 <main>

08000b2a <LoopForever>:

LoopForever:
  b LoopForever
 8000b2a:	e7fe      	b.n	8000b2a <LoopForever>
  ldr   r0, =_estack
 8000b2c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000b38:	080051ec 	.word	0x080051ec
  ldr r2, =_sbss
 8000b3c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000b40:	200001c8 	.word	0x200001c8

08000b44 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_COMP_IRQHandler>

08000b46 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <HAL_Init+0x3c>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <HAL_Init+0x3c>)
 8000b62:	2180      	movs	r1, #128	@ 0x80
 8000b64:	0049      	lsls	r1, r1, #1
 8000b66:	430a      	orrs	r2, r1
 8000b68:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b6a:	2003      	movs	r0, #3
 8000b6c:	f000 f810 	bl	8000b90 <HAL_InitTick>
 8000b70:	1e03      	subs	r3, r0, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	e001      	b.n	8000b80 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fe46 	bl	800080c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b80:	1dfb      	adds	r3, r7, #7
 8000b82:	781b      	ldrb	r3, [r3, #0]
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b002      	add	sp, #8
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40022000 	.word	0x40022000

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b98:	230f      	movs	r3, #15
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <HAL_InitTick+0x88>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d02b      	beq.n	8000c00 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <HAL_InitTick+0x8c>)
 8000baa:	681c      	ldr	r4, [r3, #0]
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <HAL_InitTick+0x88>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	23fa      	movs	r3, #250	@ 0xfa
 8000bb4:	0098      	lsls	r0, r3, #2
 8000bb6:	f7ff faa5 	bl	8000104 <__udivsi3>
 8000bba:	0003      	movs	r3, r0
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	0020      	movs	r0, r4
 8000bc0:	f7ff faa0 	bl	8000104 <__udivsi3>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 f93d 	bl	8000e46 <HAL_SYSTICK_Config>
 8000bcc:	1e03      	subs	r3, r0, #0
 8000bce:	d112      	bne.n	8000bf6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d80a      	bhi.n	8000bec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	2301      	movs	r3, #1
 8000bda:	425b      	negs	r3, r3
 8000bdc:	2200      	movs	r2, #0
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 f90c 	bl	8000dfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <HAL_InitTick+0x90>)
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	e00d      	b.n	8000c08 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bec:	230f      	movs	r3, #15
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
 8000bf4:	e008      	b.n	8000c08 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bf6:	230f      	movs	r3, #15
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
 8000bfe:	e003      	b.n	8000c08 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c00:	230f      	movs	r3, #15
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c08:	230f      	movs	r3, #15
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	781b      	ldrb	r3, [r3, #0]
}
 8000c0e:	0018      	movs	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b005      	add	sp, #20
 8000c14:	bd90      	pop	{r4, r7, pc}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	20000014 	.word	0x20000014
 8000c1c:	2000000c 	.word	0x2000000c
 8000c20:	20000010 	.word	0x20000010

08000c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c28:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <HAL_IncTick+0x1c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <HAL_IncTick+0x20>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	18d2      	adds	r2, r2, r3
 8000c34:	4b03      	ldr	r3, [pc, #12]	@ (8000c44 <HAL_IncTick+0x20>)
 8000c36:	601a      	str	r2, [r3, #0]
}
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	20000014 	.word	0x20000014
 8000c44:	200001c4 	.word	0x200001c4

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b02      	ldr	r3, [pc, #8]	@ (8000c58 <HAL_GetTick+0x10>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	200001c4 	.word	0x200001c4

08000c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c64:	f7ff fff0 	bl	8000c48 <HAL_GetTick>
 8000c68:	0003      	movs	r3, r0
 8000c6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	3301      	adds	r3, #1
 8000c74:	d005      	beq.n	8000c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <HAL_Delay+0x44>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	189b      	adds	r3, r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	f7ff ffe0 	bl	8000c48 <HAL_GetTick>
 8000c88:	0002      	movs	r2, r0
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d8f7      	bhi.n	8000c84 <HAL_Delay+0x28>
  {
  }
}
 8000c94:	46c0      	nop			@ (mov r8, r8)
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b004      	add	sp, #16
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	20000014 	.word	0x20000014

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	0002      	movs	r2, r0
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cb6:	d809      	bhi.n	8000ccc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	231f      	movs	r3, #31
 8000cc0:	401a      	ands	r2, r3
 8000cc2:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <__NVIC_EnableIRQ+0x30>)
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	000a      	movs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ccc:	46c0      	nop			@ (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	0002      	movs	r2, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cec:	d828      	bhi.n	8000d40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cee:	4a2f      	ldr	r2, [pc, #188]	@ (8000dac <__NVIC_SetPriority+0xd4>)
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	33c0      	adds	r3, #192	@ 0xc0
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	589b      	ldr	r3, [r3, r2]
 8000cfe:	1dfa      	adds	r2, r7, #7
 8000d00:	7812      	ldrb	r2, [r2, #0]
 8000d02:	0011      	movs	r1, r2
 8000d04:	2203      	movs	r2, #3
 8000d06:	400a      	ands	r2, r1
 8000d08:	00d2      	lsls	r2, r2, #3
 8000d0a:	21ff      	movs	r1, #255	@ 0xff
 8000d0c:	4091      	lsls	r1, r2
 8000d0e:	000a      	movs	r2, r1
 8000d10:	43d2      	mvns	r2, r2
 8000d12:	401a      	ands	r2, r3
 8000d14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	019b      	lsls	r3, r3, #6
 8000d1a:	22ff      	movs	r2, #255	@ 0xff
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	0018      	movs	r0, r3
 8000d24:	2303      	movs	r3, #3
 8000d26:	4003      	ands	r3, r0
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2c:	481f      	ldr	r0, [pc, #124]	@ (8000dac <__NVIC_SetPriority+0xd4>)
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b25b      	sxtb	r3, r3
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	430a      	orrs	r2, r1
 8000d38:	33c0      	adds	r3, #192	@ 0xc0
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d3e:	e031      	b.n	8000da4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d40:	4a1b      	ldr	r2, [pc, #108]	@ (8000db0 <__NVIC_SetPriority+0xd8>)
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	0019      	movs	r1, r3
 8000d48:	230f      	movs	r3, #15
 8000d4a:	400b      	ands	r3, r1
 8000d4c:	3b08      	subs	r3, #8
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3306      	adds	r3, #6
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	18d3      	adds	r3, r2, r3
 8000d56:	3304      	adds	r3, #4
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	1dfa      	adds	r2, r7, #7
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	0011      	movs	r1, r2
 8000d60:	2203      	movs	r2, #3
 8000d62:	400a      	ands	r2, r1
 8000d64:	00d2      	lsls	r2, r2, #3
 8000d66:	21ff      	movs	r1, #255	@ 0xff
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	000a      	movs	r2, r1
 8000d6c:	43d2      	mvns	r2, r2
 8000d6e:	401a      	ands	r2, r3
 8000d70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	22ff      	movs	r2, #255	@ 0xff
 8000d78:	401a      	ands	r2, r3
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	0018      	movs	r0, r3
 8000d80:	2303      	movs	r3, #3
 8000d82:	4003      	ands	r3, r0
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d88:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <__NVIC_SetPriority+0xd8>)
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	001c      	movs	r4, r3
 8000d90:	230f      	movs	r3, #15
 8000d92:	4023      	ands	r3, r4
 8000d94:	3b08      	subs	r3, #8
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	3306      	adds	r3, #6
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	18c3      	adds	r3, r0, r3
 8000da0:	3304      	adds	r3, #4
 8000da2:	601a      	str	r2, [r3, #0]
}
 8000da4:	46c0      	nop			@ (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b003      	add	sp, #12
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	1e5a      	subs	r2, r3, #1
 8000dc0:	2380      	movs	r3, #128	@ 0x80
 8000dc2:	045b      	lsls	r3, r3, #17
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d301      	bcc.n	8000dcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e010      	b.n	8000dee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <SysTick_Config+0x44>)
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	425b      	negs	r3, r3
 8000dd8:	2103      	movs	r1, #3
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f7ff ff7c 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <SysTick_Config+0x44>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <SysTick_Config+0x44>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	0018      	movs	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b002      	add	sp, #8
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	210f      	movs	r1, #15
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	1c02      	adds	r2, r0, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	0011      	movs	r1, r2
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b004      	add	sp, #16
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	0002      	movs	r2, r0
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff ff33 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	0018      	movs	r0, r3
 8000e52:	f7ff ffaf 	bl	8000db4 <SysTick_Config>
 8000e56:	0003      	movs	r3, r0
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e077      	b.n	8000f62 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a3d      	ldr	r2, [pc, #244]	@ (8000f6c <HAL_DMA_Init+0x10c>)
 8000e78:	4694      	mov	ip, r2
 8000e7a:	4463      	add	r3, ip
 8000e7c:	2114      	movs	r1, #20
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f7ff f940 	bl	8000104 <__udivsi3>
 8000e84:	0003      	movs	r3, r0
 8000e86:	009a      	lsls	r2, r3, #2
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2225      	movs	r2, #37	@ 0x25
 8000e90:	2102      	movs	r1, #2
 8000e92:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4934      	ldr	r1, [pc, #208]	@ (8000f70 <HAL_DMA_Init+0x110>)
 8000ea0:	400a      	ands	r2, r1
 8000ea2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6819      	ldr	r1, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f000 fa8d 	bl	80013fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	2380      	movs	r3, #128	@ 0x80
 8000ee8:	01db      	lsls	r3, r3, #7
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d102      	bne.n	8000ef4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efc:	213f      	movs	r1, #63	@ 0x3f
 8000efe:	400a      	ands	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000f0a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d011      	beq.n	8000f38 <HAL_DMA_Init+0xd8>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	d80d      	bhi.n	8000f38 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f000 fa98 	bl	8001454 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	e008      	b.n	8000f4a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2225      	movs	r2, #37	@ 0x25
 8000f54:	2101      	movs	r1, #1
 8000f56:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2224      	movs	r2, #36	@ 0x24
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	0018      	movs	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b002      	add	sp, #8
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	bffdfff8 	.word	0xbffdfff8
 8000f70:	ffff800f 	.word	0xffff800f

08000f74 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f82:	2317      	movs	r3, #23
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2224      	movs	r2, #36	@ 0x24
 8000f8e:	5c9b      	ldrb	r3, [r3, r2]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d101      	bne.n	8000f98 <HAL_DMA_Start_IT+0x24>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e06f      	b.n	8001078 <HAL_DMA_Start_IT+0x104>
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2224      	movs	r2, #36	@ 0x24
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2225      	movs	r2, #37	@ 0x25
 8000fa4:	5c9b      	ldrb	r3, [r3, r2]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d157      	bne.n	800105c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2225      	movs	r2, #37	@ 0x25
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	438a      	bics	r2, r1
 8000fc8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	68b9      	ldr	r1, [r7, #8]
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 f9d3 	bl	800137c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	210e      	movs	r1, #14
 8000fea:	430a      	orrs	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	e00f      	b.n	8001010 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	438a      	bics	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	210a      	movs	r1, #10
 800100c:	430a      	orrs	r2, r1
 800100e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	2380      	movs	r3, #128	@ 0x80
 8001018:	025b      	lsls	r3, r3, #9
 800101a:	4013      	ands	r3, r2
 800101c:	d008      	beq.n	8001030 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001028:	2180      	movs	r1, #128	@ 0x80
 800102a:	0049      	lsls	r1, r1, #1
 800102c:	430a      	orrs	r2, r1
 800102e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001034:	2b00      	cmp	r3, #0
 8001036:	d008      	beq.n	800104a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001042:	2180      	movs	r1, #128	@ 0x80
 8001044:	0049      	lsls	r1, r1, #1
 8001046:	430a      	orrs	r2, r1
 8001048:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	430a      	orrs	r2, r1
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e00a      	b.n	8001072 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2280      	movs	r2, #128	@ 0x80
 8001060:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2224      	movs	r2, #36	@ 0x24
 8001066:	2100      	movs	r1, #0
 8001068:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800106a:	2317      	movs	r3, #23
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001072:	2317      	movs	r3, #23
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	781b      	ldrb	r3, [r3, #0]
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	b006      	add	sp, #24
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e050      	b.n	8001134 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2225      	movs	r2, #37	@ 0x25
 8001096:	5c9b      	ldrb	r3, [r3, r2]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d008      	beq.n	80010b0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2204      	movs	r2, #4
 80010a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2224      	movs	r2, #36	@ 0x24
 80010a8:	2100      	movs	r1, #0
 80010aa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e041      	b.n	8001134 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	210e      	movs	r1, #14
 80010bc:	438a      	bics	r2, r1
 80010be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	491c      	ldr	r1, [pc, #112]	@ (800113c <HAL_DMA_Abort+0xbc>)
 80010cc:	400a      	ands	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2101      	movs	r1, #1
 80010dc:	438a      	bics	r2, r1
 80010de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80010e0:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <HAL_DMA_Abort+0xc0>)
 80010e2:	6859      	ldr	r1, [r3, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e8:	221c      	movs	r2, #28
 80010ea:	4013      	ands	r3, r2
 80010ec:	2201      	movs	r2, #1
 80010ee:	409a      	lsls	r2, r3
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <HAL_DMA_Abort+0xc0>)
 80010f2:	430a      	orrs	r2, r1
 80010f4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80010fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00c      	beq.n	8001122 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001112:	490a      	ldr	r1, [pc, #40]	@ (800113c <HAL_DMA_Abort+0xbc>)
 8001114:	400a      	ands	r2, r1
 8001116:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001120:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2225      	movs	r2, #37	@ 0x25
 8001126:	2101      	movs	r1, #1
 8001128:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2224      	movs	r2, #36	@ 0x24
 800112e:	2100      	movs	r1, #0
 8001130:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	0018      	movs	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	b002      	add	sp, #8
 800113a:	bd80      	pop	{r7, pc}
 800113c:	fffffeff 	.word	0xfffffeff
 8001140:	40020000 	.word	0x40020000

08001144 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800114c:	210f      	movs	r1, #15
 800114e:	187b      	adds	r3, r7, r1
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2225      	movs	r2, #37	@ 0x25
 8001158:	5c9b      	ldrb	r3, [r3, r2]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d006      	beq.n	800116e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2204      	movs	r2, #4
 8001164:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001166:	187b      	adds	r3, r7, r1
 8001168:	2201      	movs	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e049      	b.n	8001202 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	210e      	movs	r1, #14
 800117a:	438a      	bics	r2, r1
 800117c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2101      	movs	r1, #1
 800118a:	438a      	bics	r2, r1
 800118c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001198:	491d      	ldr	r1, [pc, #116]	@ (8001210 <HAL_DMA_Abort_IT+0xcc>)
 800119a:	400a      	ands	r2, r1
 800119c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800119e:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <HAL_DMA_Abort_IT+0xd0>)
 80011a0:	6859      	ldr	r1, [r3, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	221c      	movs	r2, #28
 80011a8:	4013      	ands	r3, r2
 80011aa:	2201      	movs	r2, #1
 80011ac:	409a      	lsls	r2, r3
 80011ae:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <HAL_DMA_Abort_IT+0xd0>)
 80011b0:	430a      	orrs	r2, r1
 80011b2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80011bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00c      	beq.n	80011e0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011d0:	490f      	ldr	r1, [pc, #60]	@ (8001210 <HAL_DMA_Abort_IT+0xcc>)
 80011d2:	400a      	ands	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80011de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2225      	movs	r2, #37	@ 0x25
 80011e4:	2101      	movs	r1, #1
 80011e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2224      	movs	r2, #36	@ 0x24
 80011ec:	2100      	movs	r1, #0
 80011ee:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	0010      	movs	r0, r2
 8001200:	4798      	blx	r3
    }
  }
  return status;
 8001202:	230f      	movs	r3, #15
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	781b      	ldrb	r3, [r3, #0]
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	b004      	add	sp, #16
 800120e:	bd80      	pop	{r7, pc}
 8001210:	fffffeff 	.word	0xfffffeff
 8001214:	40020000 	.word	0x40020000

08001218 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001220:	4b55      	ldr	r3, [pc, #340]	@ (8001378 <HAL_DMA_IRQHandler+0x160>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	221c      	movs	r2, #28
 8001234:	4013      	ands	r3, r2
 8001236:	2204      	movs	r2, #4
 8001238:	409a      	lsls	r2, r3
 800123a:	0013      	movs	r3, r2
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	4013      	ands	r3, r2
 8001240:	d027      	beq.n	8001292 <HAL_DMA_IRQHandler+0x7a>
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	2204      	movs	r2, #4
 8001246:	4013      	ands	r3, r2
 8001248:	d023      	beq.n	8001292 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2220      	movs	r2, #32
 8001252:	4013      	ands	r3, r2
 8001254:	d107      	bne.n	8001266 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2104      	movs	r1, #4
 8001262:	438a      	bics	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001266:	4b44      	ldr	r3, [pc, #272]	@ (8001378 <HAL_DMA_IRQHandler+0x160>)
 8001268:	6859      	ldr	r1, [r3, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	221c      	movs	r2, #28
 8001270:	4013      	ands	r3, r2
 8001272:	2204      	movs	r2, #4
 8001274:	409a      	lsls	r2, r3
 8001276:	4b40      	ldr	r3, [pc, #256]	@ (8001378 <HAL_DMA_IRQHandler+0x160>)
 8001278:	430a      	orrs	r2, r1
 800127a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001280:	2b00      	cmp	r3, #0
 8001282:	d100      	bne.n	8001286 <HAL_DMA_IRQHandler+0x6e>
 8001284:	e073      	b.n	800136e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	0010      	movs	r0, r2
 800128e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001290:	e06d      	b.n	800136e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	221c      	movs	r2, #28
 8001298:	4013      	ands	r3, r2
 800129a:	2202      	movs	r2, #2
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	4013      	ands	r3, r2
 80012a4:	d02e      	beq.n	8001304 <HAL_DMA_IRQHandler+0xec>
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2202      	movs	r2, #2
 80012aa:	4013      	ands	r3, r2
 80012ac:	d02a      	beq.n	8001304 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2220      	movs	r2, #32
 80012b6:	4013      	ands	r3, r2
 80012b8:	d10b      	bne.n	80012d2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	210a      	movs	r1, #10
 80012c6:	438a      	bics	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2225      	movs	r2, #37	@ 0x25
 80012ce:	2101      	movs	r1, #1
 80012d0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80012d2:	4b29      	ldr	r3, [pc, #164]	@ (8001378 <HAL_DMA_IRQHandler+0x160>)
 80012d4:	6859      	ldr	r1, [r3, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	221c      	movs	r2, #28
 80012dc:	4013      	ands	r3, r2
 80012de:	2202      	movs	r2, #2
 80012e0:	409a      	lsls	r2, r3
 80012e2:	4b25      	ldr	r3, [pc, #148]	@ (8001378 <HAL_DMA_IRQHandler+0x160>)
 80012e4:	430a      	orrs	r2, r1
 80012e6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2224      	movs	r2, #36	@ 0x24
 80012ec:	2100      	movs	r1, #0
 80012ee:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d03a      	beq.n	800136e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	0010      	movs	r0, r2
 8001300:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001302:	e034      	b.n	800136e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	221c      	movs	r2, #28
 800130a:	4013      	ands	r3, r2
 800130c:	2208      	movs	r2, #8
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4013      	ands	r3, r2
 8001316:	d02b      	beq.n	8001370 <HAL_DMA_IRQHandler+0x158>
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2208      	movs	r2, #8
 800131c:	4013      	ands	r3, r2
 800131e:	d027      	beq.n	8001370 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	210e      	movs	r1, #14
 800132c:	438a      	bics	r2, r1
 800132e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001330:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <HAL_DMA_IRQHandler+0x160>)
 8001332:	6859      	ldr	r1, [r3, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	221c      	movs	r2, #28
 800133a:	4013      	ands	r3, r2
 800133c:	2201      	movs	r2, #1
 800133e:	409a      	lsls	r2, r3
 8001340:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <HAL_DMA_IRQHandler+0x160>)
 8001342:	430a      	orrs	r2, r1
 8001344:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2225      	movs	r2, #37	@ 0x25
 8001350:	2101      	movs	r1, #1
 8001352:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2224      	movs	r2, #36	@ 0x24
 8001358:	2100      	movs	r1, #0
 800135a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	0010      	movs	r0, r2
 800136c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	46c0      	nop			@ (mov r8, r8)
}
 8001372:	46bd      	mov	sp, r7
 8001374:	b004      	add	sp, #16
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40020000 	.word	0x40020000

0800137c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001392:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001398:	2b00      	cmp	r3, #0
 800139a:	d004      	beq.n	80013a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80013a4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80013a6:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <DMA_SetConfig+0x7c>)
 80013a8:	6859      	ldr	r1, [r3, #4]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	221c      	movs	r2, #28
 80013b0:	4013      	ands	r3, r2
 80013b2:	2201      	movs	r2, #1
 80013b4:	409a      	lsls	r2, r3
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <DMA_SetConfig+0x7c>)
 80013b8:	430a      	orrs	r2, r1
 80013ba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b10      	cmp	r3, #16
 80013ca:	d108      	bne.n	80013de <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013dc:	e007      	b.n	80013ee <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	60da      	str	r2, [r3, #12]
}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b004      	add	sp, #16
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			@ (mov r8, r8)
 80013f8:	40020000 	.word	0x40020000

080013fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	4a10      	ldr	r2, [pc, #64]	@ (800144c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800140c:	4694      	mov	ip, r2
 800140e:	4463      	add	r3, ip
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	001a      	movs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	001a      	movs	r2, r3
 800141e:	23ff      	movs	r3, #255	@ 0xff
 8001420:	4013      	ands	r3, r2
 8001422:	3b08      	subs	r3, #8
 8001424:	2114      	movs	r1, #20
 8001426:	0018      	movs	r0, r3
 8001428:	f7fe fe6c 	bl	8000104 <__udivsi3>
 800142c:	0003      	movs	r3, r0
 800142e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a07      	ldr	r2, [pc, #28]	@ (8001450 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001434:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	221f      	movs	r2, #31
 800143a:	4013      	ands	r3, r2
 800143c:	2201      	movs	r2, #1
 800143e:	409a      	lsls	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001444:	46c0      	nop			@ (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	b004      	add	sp, #16
 800144a:	bd80      	pop	{r7, pc}
 800144c:	10008200 	.word	0x10008200
 8001450:	40020880 	.word	0x40020880

08001454 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	223f      	movs	r2, #63	@ 0x3f
 8001462:	4013      	ands	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800146a:	4694      	mov	ip, r2
 800146c:	4463      	add	r3, ip
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	001a      	movs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a07      	ldr	r2, [pc, #28]	@ (8001498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800147a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3b01      	subs	r3, #1
 8001480:	2203      	movs	r2, #3
 8001482:	4013      	ands	r3, r2
 8001484:	2201      	movs	r2, #1
 8001486:	409a      	lsls	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b004      	add	sp, #16
 8001492:	bd80      	pop	{r7, pc}
 8001494:	1000823f 	.word	0x1000823f
 8001498:	40020940 	.word	0x40020940

0800149c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014aa:	e147      	b.n	800173c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2101      	movs	r1, #1
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	4091      	lsls	r1, r2
 80014b6:	000a      	movs	r2, r1
 80014b8:	4013      	ands	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d100      	bne.n	80014c4 <HAL_GPIO_Init+0x28>
 80014c2:	e138      	b.n	8001736 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2203      	movs	r2, #3
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d005      	beq.n	80014dc <HAL_GPIO_Init+0x40>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2203      	movs	r2, #3
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d130      	bne.n	800153e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	409a      	lsls	r2, r3
 80014ea:	0013      	movs	r3, r2
 80014ec:	43da      	mvns	r2, r3
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	409a      	lsls	r2, r3
 80014fe:	0013      	movs	r3, r2
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001512:	2201      	movs	r2, #1
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	409a      	lsls	r2, r3
 8001518:	0013      	movs	r3, r2
 800151a:	43da      	mvns	r2, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	2201      	movs	r2, #1
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
 8001530:	0013      	movs	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2203      	movs	r2, #3
 8001544:	4013      	ands	r3, r2
 8001546:	2b03      	cmp	r3, #3
 8001548:	d017      	beq.n	800157a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	2203      	movs	r2, #3
 8001556:	409a      	lsls	r2, r3
 8001558:	0013      	movs	r3, r2
 800155a:	43da      	mvns	r2, r3
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2203      	movs	r2, #3
 8001580:	4013      	ands	r3, r2
 8001582:	2b02      	cmp	r3, #2
 8001584:	d123      	bne.n	80015ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	08da      	lsrs	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3208      	adds	r2, #8
 800158e:	0092      	lsls	r2, r2, #2
 8001590:	58d3      	ldr	r3, [r2, r3]
 8001592:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2207      	movs	r2, #7
 8001598:	4013      	ands	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	220f      	movs	r2, #15
 800159e:	409a      	lsls	r2, r3
 80015a0:	0013      	movs	r3, r2
 80015a2:	43da      	mvns	r2, r3
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	691a      	ldr	r2, [r3, #16]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2107      	movs	r1, #7
 80015b2:	400b      	ands	r3, r1
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	409a      	lsls	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	08da      	lsrs	r2, r3, #3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3208      	adds	r2, #8
 80015c8:	0092      	lsls	r2, r2, #2
 80015ca:	6939      	ldr	r1, [r7, #16]
 80015cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	2203      	movs	r2, #3
 80015da:	409a      	lsls	r2, r3
 80015dc:	0013      	movs	r3, r2
 80015de:	43da      	mvns	r2, r3
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2203      	movs	r2, #3
 80015ec:	401a      	ands	r2, r3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	409a      	lsls	r2, r3
 80015f4:	0013      	movs	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	23c0      	movs	r3, #192	@ 0xc0
 8001608:	029b      	lsls	r3, r3, #10
 800160a:	4013      	ands	r3, r2
 800160c:	d100      	bne.n	8001610 <HAL_GPIO_Init+0x174>
 800160e:	e092      	b.n	8001736 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001610:	4a50      	ldr	r2, [pc, #320]	@ (8001754 <HAL_GPIO_Init+0x2b8>)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	3318      	adds	r3, #24
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	589b      	ldr	r3, [r3, r2]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	2203      	movs	r2, #3
 8001622:	4013      	ands	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	220f      	movs	r2, #15
 8001628:	409a      	lsls	r2, r3
 800162a:	0013      	movs	r3, r2
 800162c:	43da      	mvns	r2, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	23a0      	movs	r3, #160	@ 0xa0
 8001638:	05db      	lsls	r3, r3, #23
 800163a:	429a      	cmp	r2, r3
 800163c:	d013      	beq.n	8001666 <HAL_GPIO_Init+0x1ca>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a45      	ldr	r2, [pc, #276]	@ (8001758 <HAL_GPIO_Init+0x2bc>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d00d      	beq.n	8001662 <HAL_GPIO_Init+0x1c6>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a44      	ldr	r2, [pc, #272]	@ (800175c <HAL_GPIO_Init+0x2c0>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d007      	beq.n	800165e <HAL_GPIO_Init+0x1c2>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a43      	ldr	r2, [pc, #268]	@ (8001760 <HAL_GPIO_Init+0x2c4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d101      	bne.n	800165a <HAL_GPIO_Init+0x1be>
 8001656:	2303      	movs	r3, #3
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x1cc>
 800165a:	2305      	movs	r3, #5
 800165c:	e004      	b.n	8001668 <HAL_GPIO_Init+0x1cc>
 800165e:	2302      	movs	r3, #2
 8001660:	e002      	b.n	8001668 <HAL_GPIO_Init+0x1cc>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <HAL_GPIO_Init+0x1cc>
 8001666:	2300      	movs	r3, #0
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	2103      	movs	r1, #3
 800166c:	400a      	ands	r2, r1
 800166e:	00d2      	lsls	r2, r2, #3
 8001670:	4093      	lsls	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001678:	4936      	ldr	r1, [pc, #216]	@ (8001754 <HAL_GPIO_Init+0x2b8>)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	3318      	adds	r3, #24
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001686:	4b33      	ldr	r3, [pc, #204]	@ (8001754 <HAL_GPIO_Init+0x2b8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	43da      	mvns	r2, r3
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	2380      	movs	r3, #128	@ 0x80
 800169c:	035b      	lsls	r3, r3, #13
 800169e:	4013      	ands	r3, r2
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <HAL_GPIO_Init+0x2b8>)
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80016b0:	4b28      	ldr	r3, [pc, #160]	@ (8001754 <HAL_GPIO_Init+0x2b8>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	43da      	mvns	r2, r3
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	039b      	lsls	r3, r3, #14
 80016c8:	4013      	ands	r3, r2
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001754 <HAL_GPIO_Init+0x2b8>)
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016da:	4a1e      	ldr	r2, [pc, #120]	@ (8001754 <HAL_GPIO_Init+0x2b8>)
 80016dc:	2384      	movs	r3, #132	@ 0x84
 80016de:	58d3      	ldr	r3, [r2, r3]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	43da      	mvns	r2, r3
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	029b      	lsls	r3, r3, #10
 80016f4:	4013      	ands	r3, r2
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001700:	4914      	ldr	r1, [pc, #80]	@ (8001754 <HAL_GPIO_Init+0x2b8>)
 8001702:	2284      	movs	r2, #132	@ 0x84
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001708:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <HAL_GPIO_Init+0x2b8>)
 800170a:	2380      	movs	r3, #128	@ 0x80
 800170c:	58d3      	ldr	r3, [r2, r3]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43da      	mvns	r2, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	2380      	movs	r3, #128	@ 0x80
 8001720:	025b      	lsls	r3, r3, #9
 8001722:	4013      	ands	r3, r2
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800172e:	4909      	ldr	r1, [pc, #36]	@ (8001754 <HAL_GPIO_Init+0x2b8>)
 8001730:	2280      	movs	r2, #128	@ 0x80
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	40da      	lsrs	r2, r3
 8001744:	1e13      	subs	r3, r2, #0
 8001746:	d000      	beq.n	800174a <HAL_GPIO_Init+0x2ae>
 8001748:	e6b0      	b.n	80014ac <HAL_GPIO_Init+0x10>
  }
}
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	46c0      	nop			@ (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b006      	add	sp, #24
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021800 	.word	0x40021800
 8001758:	50000400 	.word	0x50000400
 800175c:	50000800 	.word	0x50000800
 8001760:	50000c00 	.word	0x50000c00

08001764 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800176c:	4b19      	ldr	r3, [pc, #100]	@ (80017d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a19      	ldr	r2, [pc, #100]	@ (80017d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001772:	4013      	ands	r3, r2
 8001774:	0019      	movs	r1, r3
 8001776:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	2380      	movs	r3, #128	@ 0x80
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	429a      	cmp	r2, r3
 8001786:	d11f      	bne.n	80017c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001788:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	0013      	movs	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	189b      	adds	r3, r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4912      	ldr	r1, [pc, #72]	@ (80017e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001796:	0018      	movs	r0, r3
 8001798:	f7fe fcb4 	bl	8000104 <__udivsi3>
 800179c:	0003      	movs	r3, r0
 800179e:	3301      	adds	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017a2:	e008      	b.n	80017b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e001      	b.n	80017b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e009      	b.n	80017ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b6:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	2380      	movs	r3, #128	@ 0x80
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	401a      	ands	r2, r3
 80017c0:	2380      	movs	r3, #128	@ 0x80
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d0ed      	beq.n	80017a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b004      	add	sp, #16
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	40007000 	.word	0x40007000
 80017d8:	fffff9ff 	.word	0xfffff9ff
 80017dc:	2000000c 	.word	0x2000000c
 80017e0:	000f4240 	.word	0x000f4240

080017e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	23e0      	movs	r3, #224	@ 0xe0
 80017ee:	01db      	lsls	r3, r3, #7
 80017f0:	4013      	ands	r3, r2
}
 80017f2:	0018      	movs	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40021000 	.word	0x40021000

080017fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e2fe      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2201      	movs	r2, #1
 8001814:	4013      	ands	r3, r2
 8001816:	d100      	bne.n	800181a <HAL_RCC_OscConfig+0x1e>
 8001818:	e07c      	b.n	8001914 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181a:	4bc3      	ldr	r3, [pc, #780]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2238      	movs	r2, #56	@ 0x38
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001824:	4bc0      	ldr	r3, [pc, #768]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2203      	movs	r2, #3
 800182a:	4013      	ands	r3, r2
 800182c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	2b10      	cmp	r3, #16
 8001832:	d102      	bne.n	800183a <HAL_RCC_OscConfig+0x3e>
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2b03      	cmp	r3, #3
 8001838:	d002      	beq.n	8001840 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	2b08      	cmp	r3, #8
 800183e:	d10b      	bne.n	8001858 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	4bb9      	ldr	r3, [pc, #740]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	@ 0x80
 8001846:	029b      	lsls	r3, r3, #10
 8001848:	4013      	ands	r3, r2
 800184a:	d062      	beq.n	8001912 <HAL_RCC_OscConfig+0x116>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d15e      	bne.n	8001912 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e2d9      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	2380      	movs	r3, #128	@ 0x80
 800185e:	025b      	lsls	r3, r3, #9
 8001860:	429a      	cmp	r2, r3
 8001862:	d107      	bne.n	8001874 <HAL_RCC_OscConfig+0x78>
 8001864:	4bb0      	ldr	r3, [pc, #704]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4baf      	ldr	r3, [pc, #700]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 800186a:	2180      	movs	r1, #128	@ 0x80
 800186c:	0249      	lsls	r1, r1, #9
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	e020      	b.n	80018b6 <HAL_RCC_OscConfig+0xba>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	23a0      	movs	r3, #160	@ 0xa0
 800187a:	02db      	lsls	r3, r3, #11
 800187c:	429a      	cmp	r2, r3
 800187e:	d10e      	bne.n	800189e <HAL_RCC_OscConfig+0xa2>
 8001880:	4ba9      	ldr	r3, [pc, #676]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4ba8      	ldr	r3, [pc, #672]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001886:	2180      	movs	r1, #128	@ 0x80
 8001888:	02c9      	lsls	r1, r1, #11
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	4ba6      	ldr	r3, [pc, #664]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4ba5      	ldr	r3, [pc, #660]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001894:	2180      	movs	r1, #128	@ 0x80
 8001896:	0249      	lsls	r1, r1, #9
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	e00b      	b.n	80018b6 <HAL_RCC_OscConfig+0xba>
 800189e:	4ba2      	ldr	r3, [pc, #648]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4ba1      	ldr	r3, [pc, #644]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 80018a4:	49a1      	ldr	r1, [pc, #644]	@ (8001b2c <HAL_RCC_OscConfig+0x330>)
 80018a6:	400a      	ands	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	4b9f      	ldr	r3, [pc, #636]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b9e      	ldr	r3, [pc, #632]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 80018b0:	499f      	ldr	r1, [pc, #636]	@ (8001b30 <HAL_RCC_OscConfig+0x334>)
 80018b2:	400a      	ands	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d014      	beq.n	80018e8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018be:	f7ff f9c3 	bl	8000c48 <HAL_GetTick>
 80018c2:	0003      	movs	r3, r0
 80018c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff f9be 	bl	8000c48 <HAL_GetTick>
 80018cc:	0002      	movs	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	@ 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e298      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018da:	4b93      	ldr	r3, [pc, #588]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	2380      	movs	r3, #128	@ 0x80
 80018e0:	029b      	lsls	r3, r3, #10
 80018e2:	4013      	ands	r3, r2
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0xcc>
 80018e6:	e015      	b.n	8001914 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff f9ae 	bl	8000c48 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f2:	f7ff f9a9 	bl	8000c48 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b64      	cmp	r3, #100	@ 0x64
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e283      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001904:	4b88      	ldr	r3, [pc, #544]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	@ 0x80
 800190a:	029b      	lsls	r3, r3, #10
 800190c:	4013      	ands	r3, r2
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0xf6>
 8001910:	e000      	b.n	8001914 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001912:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2202      	movs	r2, #2
 800191a:	4013      	ands	r3, r2
 800191c:	d100      	bne.n	8001920 <HAL_RCC_OscConfig+0x124>
 800191e:	e099      	b.n	8001a54 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001920:	4b81      	ldr	r3, [pc, #516]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2238      	movs	r2, #56	@ 0x38
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800192a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2203      	movs	r2, #3
 8001930:	4013      	ands	r3, r2
 8001932:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2b10      	cmp	r3, #16
 8001938:	d102      	bne.n	8001940 <HAL_RCC_OscConfig+0x144>
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d002      	beq.n	8001946 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d135      	bne.n	80019b2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001946:	4b78      	ldr	r3, [pc, #480]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	2380      	movs	r3, #128	@ 0x80
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4013      	ands	r3, r2
 8001950:	d005      	beq.n	800195e <HAL_RCC_OscConfig+0x162>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e256      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195e:	4b72      	ldr	r3, [pc, #456]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4a74      	ldr	r2, [pc, #464]	@ (8001b34 <HAL_RCC_OscConfig+0x338>)
 8001964:	4013      	ands	r3, r2
 8001966:	0019      	movs	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	021a      	lsls	r2, r3, #8
 800196e:	4b6e      	ldr	r3, [pc, #440]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001970:	430a      	orrs	r2, r1
 8001972:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d112      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800197a:	4b6b      	ldr	r3, [pc, #428]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a6e      	ldr	r2, [pc, #440]	@ (8001b38 <HAL_RCC_OscConfig+0x33c>)
 8001980:	4013      	ands	r3, r2
 8001982:	0019      	movs	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	4b67      	ldr	r3, [pc, #412]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800198e:	4b66      	ldr	r3, [pc, #408]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	0adb      	lsrs	r3, r3, #11
 8001994:	2207      	movs	r2, #7
 8001996:	4013      	ands	r3, r2
 8001998:	4a68      	ldr	r2, [pc, #416]	@ (8001b3c <HAL_RCC_OscConfig+0x340>)
 800199a:	40da      	lsrs	r2, r3
 800199c:	4b68      	ldr	r3, [pc, #416]	@ (8001b40 <HAL_RCC_OscConfig+0x344>)
 800199e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019a0:	4b68      	ldr	r3, [pc, #416]	@ (8001b44 <HAL_RCC_OscConfig+0x348>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff f8f3 	bl	8000b90 <HAL_InitTick>
 80019aa:	1e03      	subs	r3, r0, #0
 80019ac:	d051      	beq.n	8001a52 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e22c      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d030      	beq.n	8001a1c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a5e      	ldr	r2, [pc, #376]	@ (8001b38 <HAL_RCC_OscConfig+0x33c>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	0019      	movs	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	4b57      	ldr	r3, [pc, #348]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 80019ca:	430a      	orrs	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80019ce:	4b56      	ldr	r3, [pc, #344]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b55      	ldr	r3, [pc, #340]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 80019d4:	2180      	movs	r1, #128	@ 0x80
 80019d6:	0049      	lsls	r1, r1, #1
 80019d8:	430a      	orrs	r2, r1
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff f934 	bl	8000c48 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e6:	f7ff f92f 	bl	8000c48 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e209      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4013      	ands	r3, r2
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	4b48      	ldr	r3, [pc, #288]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4a4a      	ldr	r2, [pc, #296]	@ (8001b34 <HAL_RCC_OscConfig+0x338>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	021a      	lsls	r2, r3, #8
 8001a14:	4b44      	ldr	r3, [pc, #272]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001a16:	430a      	orrs	r2, r1
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	e01b      	b.n	8001a54 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a1c:	4b42      	ldr	r3, [pc, #264]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b41      	ldr	r3, [pc, #260]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001a22:	4949      	ldr	r1, [pc, #292]	@ (8001b48 <HAL_RCC_OscConfig+0x34c>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f90e 	bl	8000c48 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a32:	f7ff f909 	bl	8000c48 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e1e3      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a44:	4b38      	ldr	r3, [pc, #224]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	@ 0x80
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x236>
 8001a50:	e000      	b.n	8001a54 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a52:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2208      	movs	r2, #8
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d047      	beq.n	8001aee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a5e:	4b32      	ldr	r3, [pc, #200]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2238      	movs	r2, #56	@ 0x38
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b18      	cmp	r3, #24
 8001a68:	d10a      	bne.n	8001a80 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6e:	2202      	movs	r2, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	d03c      	beq.n	8001aee <HAL_RCC_OscConfig+0x2f2>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d138      	bne.n	8001aee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e1c5      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d019      	beq.n	8001abc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a88:	4b27      	ldr	r3, [pc, #156]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001a8a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a8c:	4b26      	ldr	r3, [pc, #152]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	2101      	movs	r1, #1
 8001a90:	430a      	orrs	r2, r1
 8001a92:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f8d8 	bl	8000c48 <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9e:	f7ff f8d3 	bl	8000c48 <HAL_GetTick>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e1ad      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d0f1      	beq.n	8001a9e <HAL_RCC_OscConfig+0x2a2>
 8001aba:	e018      	b.n	8001aee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001abc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001abe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ac0:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	438a      	bics	r2, r1
 8001ac6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f8be 	bl	8000c48 <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad2:	f7ff f8b9 	bl	8000c48 <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e193      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ae4:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae8:	2202      	movs	r2, #2
 8001aea:	4013      	ands	r3, r2
 8001aec:	d1f1      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2204      	movs	r2, #4
 8001af4:	4013      	ands	r3, r2
 8001af6:	d100      	bne.n	8001afa <HAL_RCC_OscConfig+0x2fe>
 8001af8:	e0c6      	b.n	8001c88 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afa:	231f      	movs	r3, #31
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b02:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2238      	movs	r2, #56	@ 0x38
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	d11e      	bne.n	8001b4c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <HAL_RCC_OscConfig+0x32c>)
 8001b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b12:	2202      	movs	r2, #2
 8001b14:	4013      	ands	r3, r2
 8001b16:	d100      	bne.n	8001b1a <HAL_RCC_OscConfig+0x31e>
 8001b18:	e0b6      	b.n	8001c88 <HAL_RCC_OscConfig+0x48c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d000      	beq.n	8001b24 <HAL_RCC_OscConfig+0x328>
 8001b22:	e0b1      	b.n	8001c88 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e171      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	fffeffff 	.word	0xfffeffff
 8001b30:	fffbffff 	.word	0xfffbffff
 8001b34:	ffff80ff 	.word	0xffff80ff
 8001b38:	ffffc7ff 	.word	0xffffc7ff
 8001b3c:	00f42400 	.word	0x00f42400
 8001b40:	2000000c 	.word	0x2000000c
 8001b44:	20000010 	.word	0x20000010
 8001b48:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b4c:	4bb1      	ldr	r3, [pc, #708]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001b4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b50:	2380      	movs	r3, #128	@ 0x80
 8001b52:	055b      	lsls	r3, r3, #21
 8001b54:	4013      	ands	r3, r2
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_OscConfig+0x360>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <HAL_RCC_OscConfig+0x362>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d011      	beq.n	8001b86 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	4bac      	ldr	r3, [pc, #688]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001b64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b66:	4bab      	ldr	r3, [pc, #684]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001b68:	2180      	movs	r1, #128	@ 0x80
 8001b6a:	0549      	lsls	r1, r1, #21
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b70:	4ba8      	ldr	r3, [pc, #672]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001b72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b74:	2380      	movs	r3, #128	@ 0x80
 8001b76:	055b      	lsls	r3, r3, #21
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b7e:	231f      	movs	r3, #31
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b86:	4ba4      	ldr	r3, [pc, #656]	@ (8001e18 <HAL_RCC_OscConfig+0x61c>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	2380      	movs	r3, #128	@ 0x80
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d11a      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b92:	4ba1      	ldr	r3, [pc, #644]	@ (8001e18 <HAL_RCC_OscConfig+0x61c>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4ba0      	ldr	r3, [pc, #640]	@ (8001e18 <HAL_RCC_OscConfig+0x61c>)
 8001b98:	2180      	movs	r1, #128	@ 0x80
 8001b9a:	0049      	lsls	r1, r1, #1
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f852 	bl	8000c48 <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001baa:	f7ff f84d 	bl	8000c48 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e127      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bbc:	4b96      	ldr	r3, [pc, #600]	@ (8001e18 <HAL_RCC_OscConfig+0x61c>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2380      	movs	r3, #128	@ 0x80
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d106      	bne.n	8001bde <HAL_RCC_OscConfig+0x3e2>
 8001bd0:	4b90      	ldr	r3, [pc, #576]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001bd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bd4:	4b8f      	ldr	r3, [pc, #572]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bdc:	e01c      	b.n	8001c18 <HAL_RCC_OscConfig+0x41c>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x404>
 8001be6:	4b8b      	ldr	r3, [pc, #556]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001be8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bea:	4b8a      	ldr	r3, [pc, #552]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001bec:	2104      	movs	r1, #4
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bf2:	4b88      	ldr	r3, [pc, #544]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001bf4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bf6:	4b87      	ldr	r3, [pc, #540]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCC_OscConfig+0x41c>
 8001c00:	4b84      	ldr	r3, [pc, #528]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001c02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c04:	4b83      	ldr	r3, [pc, #524]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001c06:	2101      	movs	r1, #1
 8001c08:	438a      	bics	r2, r1
 8001c0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c0c:	4b81      	ldr	r3, [pc, #516]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001c0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c10:	4b80      	ldr	r3, [pc, #512]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001c12:	2104      	movs	r1, #4
 8001c14:	438a      	bics	r2, r1
 8001c16:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d014      	beq.n	8001c4a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff f812 	bl	8000c48 <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c28:	e009      	b.n	8001c3e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f7ff f80d 	bl	8000c48 <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	4a79      	ldr	r2, [pc, #484]	@ (8001e1c <HAL_RCC_OscConfig+0x620>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e0e6      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c3e:	4b75      	ldr	r3, [pc, #468]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c42:	2202      	movs	r2, #2
 8001c44:	4013      	ands	r3, r2
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x42e>
 8001c48:	e013      	b.n	8001c72 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7fe fffd 	bl	8000c48 <HAL_GetTick>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c52:	e009      	b.n	8001c68 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c54:	f7fe fff8 	bl	8000c48 <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	4a6f      	ldr	r2, [pc, #444]	@ (8001e1c <HAL_RCC_OscConfig+0x620>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e0d1      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c68:	4b6a      	ldr	r3, [pc, #424]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c72:	231f      	movs	r3, #31
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d105      	bne.n	8001c88 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c7c:	4b65      	ldr	r3, [pc, #404]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001c7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c80:	4b64      	ldr	r3, [pc, #400]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001c82:	4967      	ldr	r1, [pc, #412]	@ (8001e20 <HAL_RCC_OscConfig+0x624>)
 8001c84:	400a      	ands	r2, r1
 8001c86:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d100      	bne.n	8001c92 <HAL_RCC_OscConfig+0x496>
 8001c90:	e0bb      	b.n	8001e0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c92:	4b60      	ldr	r3, [pc, #384]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2238      	movs	r2, #56	@ 0x38
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d100      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x4a4>
 8001c9e:	e07b      	b.n	8001d98 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d156      	bne.n	8001d56 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b59      	ldr	r3, [pc, #356]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001cae:	495d      	ldr	r1, [pc, #372]	@ (8001e24 <HAL_RCC_OscConfig+0x628>)
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7fe ffc8 	bl	8000c48 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7fe ffc3 	bl	8000c48 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e09d      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd0:	4b50      	ldr	r3, [pc, #320]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	@ 0x80
 8001cd6:	049b      	lsls	r3, r3, #18
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d1f0      	bne.n	8001cbe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4a51      	ldr	r2, [pc, #324]	@ (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1a      	ldr	r2, [r3, #32]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	4b42      	ldr	r3, [pc, #264]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d10:	4b40      	ldr	r3, [pc, #256]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b3f      	ldr	r3, [pc, #252]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001d16:	2180      	movs	r1, #128	@ 0x80
 8001d18:	0449      	lsls	r1, r1, #17
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	4b3c      	ldr	r3, [pc, #240]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001d24:	2180      	movs	r1, #128	@ 0x80
 8001d26:	0549      	lsls	r1, r1, #21
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7fe ff8c 	bl	8000c48 <HAL_GetTick>
 8001d30:	0003      	movs	r3, r0
 8001d32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d36:	f7fe ff87 	bl	8000c48 <HAL_GetTick>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e061      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d48:	4b32      	ldr	r3, [pc, #200]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	2380      	movs	r3, #128	@ 0x80
 8001d4e:	049b      	lsls	r3, r3, #18
 8001d50:	4013      	ands	r3, r2
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x53a>
 8001d54:	e059      	b.n	8001e0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d56:	4b2f      	ldr	r3, [pc, #188]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001d5c:	4931      	ldr	r1, [pc, #196]	@ (8001e24 <HAL_RCC_OscConfig+0x628>)
 8001d5e:	400a      	ands	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7fe ff71 	bl	8000c48 <HAL_GetTick>
 8001d66:	0003      	movs	r3, r0
 8001d68:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7fe ff6c 	bl	8000c48 <HAL_GetTick>
 8001d70:	0002      	movs	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e046      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7e:	4b25      	ldr	r3, [pc, #148]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2380      	movs	r3, #128	@ 0x80
 8001d84:	049b      	lsls	r3, r3, #18
 8001d86:	4013      	ands	r3, r2
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d8a:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001d90:	4926      	ldr	r1, [pc, #152]	@ (8001e2c <HAL_RCC_OscConfig+0x630>)
 8001d92:	400a      	ands	r2, r1
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	e038      	b.n	8001e0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e033      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001da4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <HAL_RCC_OscConfig+0x618>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2203      	movs	r2, #3
 8001dae:	401a      	ands	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d126      	bne.n	8001e06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2270      	movs	r2, #112	@ 0x70
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d11f      	bne.n	8001e06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	23fe      	movs	r3, #254	@ 0xfe
 8001dca:	01db      	lsls	r3, r3, #7
 8001dcc:	401a      	ands	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d116      	bne.n	8001e06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	23f8      	movs	r3, #248	@ 0xf8
 8001ddc:	039b      	lsls	r3, r3, #14
 8001dde:	401a      	ands	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d10e      	bne.n	8001e06 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	23e0      	movs	r3, #224	@ 0xe0
 8001dec:	051b      	lsls	r3, r3, #20
 8001dee:	401a      	ands	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	0f5b      	lsrs	r3, r3, #29
 8001dfc:	075a      	lsls	r2, r3, #29
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d001      	beq.n	8001e0a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b008      	add	sp, #32
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40007000 	.word	0x40007000
 8001e1c:	00001388 	.word	0x00001388
 8001e20:	efffffff 	.word	0xefffffff
 8001e24:	feffffff 	.word	0xfeffffff
 8001e28:	11c1808c 	.word	0x11c1808c
 8001e2c:	eefefffc 	.word	0xeefefffc

08001e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0e9      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e44:	4b76      	ldr	r3, [pc, #472]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2207      	movs	r2, #7
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d91e      	bls.n	8001e90 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b73      	ldr	r3, [pc, #460]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2207      	movs	r2, #7
 8001e58:	4393      	bics	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	4b70      	ldr	r3, [pc, #448]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e64:	f7fe fef0 	bl	8000c48 <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e6c:	e009      	b.n	8001e82 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6e:	f7fe feeb 	bl	8000c48 <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	4a6a      	ldr	r2, [pc, #424]	@ (8002024 <HAL_RCC_ClockConfig+0x1f4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e0ca      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e82:	4b67      	ldr	r3, [pc, #412]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2207      	movs	r2, #7
 8001e88:	4013      	ands	r3, r2
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d1ee      	bne.n	8001e6e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2202      	movs	r2, #2
 8001e96:	4013      	ands	r3, r2
 8001e98:	d015      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d006      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ea4:	4b60      	ldr	r3, [pc, #384]	@ (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	4b5f      	ldr	r3, [pc, #380]	@ (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001eaa:	21e0      	movs	r1, #224	@ 0xe0
 8001eac:	01c9      	lsls	r1, r1, #7
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	4a5d      	ldr	r2, [pc, #372]	@ (800202c <HAL_RCC_ClockConfig+0x1fc>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	0019      	movs	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	4b59      	ldr	r3, [pc, #356]	@ (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d057      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed8:	4b53      	ldr	r3, [pc, #332]	@ (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	@ 0x80
 8001ede:	029b      	lsls	r3, r3, #10
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d12b      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e097      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d107      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2380      	movs	r3, #128	@ 0x80
 8001ef6:	049b      	lsls	r3, r3, #18
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d11f      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e08b      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f08:	4b47      	ldr	r3, [pc, #284]	@ (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4013      	ands	r3, r2
 8001f12:	d113      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e07f      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f20:	4b41      	ldr	r3, [pc, #260]	@ (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f24:	2202      	movs	r2, #2
 8001f26:	4013      	ands	r3, r2
 8001f28:	d108      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e074      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f32:	2202      	movs	r2, #2
 8001f34:	4013      	ands	r3, r2
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e06d      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f3c:	4b3a      	ldr	r3, [pc, #232]	@ (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2207      	movs	r2, #7
 8001f42:	4393      	bics	r3, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4b37      	ldr	r3, [pc, #220]	@ (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f50:	f7fe fe7a 	bl	8000c48 <HAL_GetTick>
 8001f54:	0003      	movs	r3, r0
 8001f56:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f58:	e009      	b.n	8001f6e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5a:	f7fe fe75 	bl	8000c48 <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	4a2f      	ldr	r2, [pc, #188]	@ (8002024 <HAL_RCC_ClockConfig+0x1f4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e054      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2238      	movs	r2, #56	@ 0x38
 8001f74:	401a      	ands	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d1ec      	bne.n	8001f5a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f80:	4b27      	ldr	r3, [pc, #156]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2207      	movs	r2, #7
 8001f86:	4013      	ands	r3, r2
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d21e      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b24      	ldr	r3, [pc, #144]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2207      	movs	r2, #7
 8001f94:	4393      	bics	r3, r2
 8001f96:	0019      	movs	r1, r3
 8001f98:	4b21      	ldr	r3, [pc, #132]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fa0:	f7fe fe52 	bl	8000c48 <HAL_GetTick>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fa8:	e009      	b.n	8001fbe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001faa:	f7fe fe4d 	bl	8000c48 <HAL_GetTick>
 8001fae:	0002      	movs	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002024 <HAL_RCC_ClockConfig+0x1f4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e02c      	b.n	8002018 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fbe:	4b18      	ldr	r3, [pc, #96]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1ee      	bne.n	8001faa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d009      	beq.n	8001fea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd6:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	4a15      	ldr	r2, [pc, #84]	@ (8002030 <HAL_RCC_ClockConfig+0x200>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	0019      	movs	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fea:	f000 f829 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8001fee:	0001      	movs	r1, r0
 8001ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <HAL_RCC_ClockConfig+0x204>)
 8001ffc:	0092      	lsls	r2, r2, #2
 8001ffe:	58d3      	ldr	r3, [r2, r3]
 8002000:	221f      	movs	r2, #31
 8002002:	4013      	ands	r3, r2
 8002004:	000a      	movs	r2, r1
 8002006:	40da      	lsrs	r2, r3
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_RCC_ClockConfig+0x208>)
 800200a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800200c:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_RCC_ClockConfig+0x20c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0018      	movs	r0, r3
 8002012:	f7fe fdbd 	bl	8000b90 <HAL_InitTick>
 8002016:	0003      	movs	r3, r0
}
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	b004      	add	sp, #16
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40022000 	.word	0x40022000
 8002024:	00001388 	.word	0x00001388
 8002028:	40021000 	.word	0x40021000
 800202c:	fffff0ff 	.word	0xfffff0ff
 8002030:	ffff8fff 	.word	0xffff8fff
 8002034:	08005120 	.word	0x08005120
 8002038:	2000000c 	.word	0x2000000c
 800203c:	20000010 	.word	0x20000010

08002040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002046:	4b3c      	ldr	r3, [pc, #240]	@ (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2238      	movs	r2, #56	@ 0x38
 800204c:	4013      	ands	r3, r2
 800204e:	d10f      	bne.n	8002070 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002050:	4b39      	ldr	r3, [pc, #228]	@ (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0adb      	lsrs	r3, r3, #11
 8002056:	2207      	movs	r2, #7
 8002058:	4013      	ands	r3, r2
 800205a:	2201      	movs	r2, #1
 800205c:	409a      	lsls	r2, r3
 800205e:	0013      	movs	r3, r2
 8002060:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002062:	6839      	ldr	r1, [r7, #0]
 8002064:	4835      	ldr	r0, [pc, #212]	@ (800213c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002066:	f7fe f84d 	bl	8000104 <__udivsi3>
 800206a:	0003      	movs	r3, r0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	e05d      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002070:	4b31      	ldr	r3, [pc, #196]	@ (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2238      	movs	r2, #56	@ 0x38
 8002076:	4013      	ands	r3, r2
 8002078:	2b08      	cmp	r3, #8
 800207a:	d102      	bne.n	8002082 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800207c:	4b30      	ldr	r3, [pc, #192]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x100>)
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	e054      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002082:	4b2d      	ldr	r3, [pc, #180]	@ (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2238      	movs	r2, #56	@ 0x38
 8002088:	4013      	ands	r3, r2
 800208a:	2b10      	cmp	r3, #16
 800208c:	d138      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800208e:	4b2a      	ldr	r3, [pc, #168]	@ (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2203      	movs	r2, #3
 8002094:	4013      	ands	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002098:	4b27      	ldr	r3, [pc, #156]	@ (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	2207      	movs	r2, #7
 80020a0:	4013      	ands	r3, r2
 80020a2:	3301      	adds	r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d10d      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	4824      	ldr	r0, [pc, #144]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x100>)
 80020b0:	f7fe f828 	bl	8000104 <__udivsi3>
 80020b4:	0003      	movs	r3, r0
 80020b6:	0019      	movs	r1, r3
 80020b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	227f      	movs	r2, #127	@ 0x7f
 80020c0:	4013      	ands	r3, r2
 80020c2:	434b      	muls	r3, r1
 80020c4:	617b      	str	r3, [r7, #20]
        break;
 80020c6:	e00d      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	481c      	ldr	r0, [pc, #112]	@ (800213c <HAL_RCC_GetSysClockFreq+0xfc>)
 80020cc:	f7fe f81a 	bl	8000104 <__udivsi3>
 80020d0:	0003      	movs	r3, r0
 80020d2:	0019      	movs	r1, r3
 80020d4:	4b18      	ldr	r3, [pc, #96]	@ (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	227f      	movs	r2, #127	@ 0x7f
 80020dc:	4013      	ands	r3, r2
 80020de:	434b      	muls	r3, r1
 80020e0:	617b      	str	r3, [r7, #20]
        break;
 80020e2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020e4:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0f5b      	lsrs	r3, r3, #29
 80020ea:	2207      	movs	r2, #7
 80020ec:	4013      	ands	r3, r2
 80020ee:	3301      	adds	r3, #1
 80020f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	6978      	ldr	r0, [r7, #20]
 80020f6:	f7fe f805 	bl	8000104 <__udivsi3>
 80020fa:	0003      	movs	r3, r0
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	e015      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002100:	4b0d      	ldr	r3, [pc, #52]	@ (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2238      	movs	r2, #56	@ 0x38
 8002106:	4013      	ands	r3, r2
 8002108:	2b20      	cmp	r3, #32
 800210a:	d103      	bne.n	8002114 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800210c:	2380      	movs	r3, #128	@ 0x80
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	e00b      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002114:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2238      	movs	r2, #56	@ 0x38
 800211a:	4013      	ands	r3, r2
 800211c:	2b18      	cmp	r3, #24
 800211e:	d103      	bne.n	8002128 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002120:	23fa      	movs	r3, #250	@ 0xfa
 8002122:	01db      	lsls	r3, r3, #7
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	e001      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800212c:	693b      	ldr	r3, [r7, #16]
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	b006      	add	sp, #24
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			@ (mov r8, r8)
 8002138:	40021000 	.word	0x40021000
 800213c:	00f42400 	.word	0x00f42400
 8002140:	007a1200 	.word	0x007a1200

08002144 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002148:	4b02      	ldr	r3, [pc, #8]	@ (8002154 <HAL_RCC_GetHCLKFreq+0x10>)
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	2000000c 	.word	0x2000000c

08002158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002158:	b5b0      	push	{r4, r5, r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800215c:	f7ff fff2 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 8002160:	0004      	movs	r4, r0
 8002162:	f7ff fb3f 	bl	80017e4 <LL_RCC_GetAPB1Prescaler>
 8002166:	0003      	movs	r3, r0
 8002168:	0b1a      	lsrs	r2, r3, #12
 800216a:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <HAL_RCC_GetPCLK1Freq+0x28>)
 800216c:	0092      	lsls	r2, r2, #2
 800216e:	58d3      	ldr	r3, [r2, r3]
 8002170:	221f      	movs	r2, #31
 8002172:	4013      	ands	r3, r2
 8002174:	40dc      	lsrs	r4, r3
 8002176:	0023      	movs	r3, r4
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	bdb0      	pop	{r4, r5, r7, pc}
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	08005160 	.word	0x08005160

08002184 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800218c:	2313      	movs	r3, #19
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002194:	2312      	movs	r3, #18
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	029b      	lsls	r3, r3, #10
 80021a4:	4013      	ands	r3, r2
 80021a6:	d100      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80021a8:	e0a3      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021aa:	2011      	movs	r0, #17
 80021ac:	183b      	adds	r3, r7, r0
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b2:	4bc3      	ldr	r3, [pc, #780]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021b6:	2380      	movs	r3, #128	@ 0x80
 80021b8:	055b      	lsls	r3, r3, #21
 80021ba:	4013      	ands	r3, r2
 80021bc:	d110      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4bc0      	ldr	r3, [pc, #768]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021c2:	4bbf      	ldr	r3, [pc, #764]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c4:	2180      	movs	r1, #128	@ 0x80
 80021c6:	0549      	lsls	r1, r1, #21
 80021c8:	430a      	orrs	r2, r1
 80021ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021cc:	4bbc      	ldr	r3, [pc, #752]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021d0:	2380      	movs	r3, #128	@ 0x80
 80021d2:	055b      	lsls	r3, r3, #21
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021da:	183b      	adds	r3, r7, r0
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e0:	4bb8      	ldr	r3, [pc, #736]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4bb7      	ldr	r3, [pc, #732]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021e6:	2180      	movs	r1, #128	@ 0x80
 80021e8:	0049      	lsls	r1, r1, #1
 80021ea:	430a      	orrs	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021ee:	f7fe fd2b 	bl	8000c48 <HAL_GetTick>
 80021f2:	0003      	movs	r3, r0
 80021f4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021f6:	e00b      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f8:	f7fe fd26 	bl	8000c48 <HAL_GetTick>
 80021fc:	0002      	movs	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d904      	bls.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002206:	2313      	movs	r3, #19
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	2203      	movs	r2, #3
 800220c:	701a      	strb	r2, [r3, #0]
        break;
 800220e:	e005      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002210:	4bac      	ldr	r3, [pc, #688]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	2380      	movs	r3, #128	@ 0x80
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4013      	ands	r3, r2
 800221a:	d0ed      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800221c:	2313      	movs	r3, #19
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d154      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002226:	4ba6      	ldr	r3, [pc, #664]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002228:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800222a:	23c0      	movs	r3, #192	@ 0xc0
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4013      	ands	r3, r2
 8002230:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d019      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	429a      	cmp	r2, r3
 8002240:	d014      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002242:	4b9f      	ldr	r3, [pc, #636]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002246:	4aa0      	ldr	r2, [pc, #640]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002248:	4013      	ands	r3, r2
 800224a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800224c:	4b9c      	ldr	r3, [pc, #624]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800224e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002250:	4b9b      	ldr	r3, [pc, #620]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002252:	2180      	movs	r1, #128	@ 0x80
 8002254:	0249      	lsls	r1, r1, #9
 8002256:	430a      	orrs	r2, r1
 8002258:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800225a:	4b99      	ldr	r3, [pc, #612]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800225e:	4b98      	ldr	r3, [pc, #608]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002260:	499a      	ldr	r1, [pc, #616]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002262:	400a      	ands	r2, r1
 8002264:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002266:	4b96      	ldr	r3, [pc, #600]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2201      	movs	r2, #1
 8002270:	4013      	ands	r3, r2
 8002272:	d016      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7fe fce8 	bl	8000c48 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800227c:	e00c      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227e:	f7fe fce3 	bl	8000c48 <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	4a91      	ldr	r2, [pc, #580]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d904      	bls.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800228e:	2313      	movs	r3, #19
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	2203      	movs	r2, #3
 8002294:	701a      	strb	r2, [r3, #0]
            break;
 8002296:	e004      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002298:	4b89      	ldr	r3, [pc, #548]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800229a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229c:	2202      	movs	r2, #2
 800229e:	4013      	ands	r3, r2
 80022a0:	d0ed      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80022a2:	2313      	movs	r3, #19
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10a      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ac:	4b84      	ldr	r3, [pc, #528]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b0:	4a85      	ldr	r2, [pc, #532]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022ba:	4b81      	ldr	r3, [pc, #516]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022bc:	430a      	orrs	r2, r1
 80022be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022c0:	e00c      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022c2:	2312      	movs	r3, #18
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	2213      	movs	r2, #19
 80022c8:	18ba      	adds	r2, r7, r2
 80022ca:	7812      	ldrb	r2, [r2, #0]
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	e005      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d0:	2312      	movs	r3, #18
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	2213      	movs	r2, #19
 80022d6:	18ba      	adds	r2, r7, r2
 80022d8:	7812      	ldrb	r2, [r2, #0]
 80022da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022dc:	2311      	movs	r3, #17
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d105      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e6:	4b76      	ldr	r3, [pc, #472]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022ea:	4b75      	ldr	r3, [pc, #468]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ec:	4979      	ldr	r1, [pc, #484]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80022ee:	400a      	ands	r2, r1
 80022f0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2201      	movs	r2, #1
 80022f8:	4013      	ands	r3, r2
 80022fa:	d009      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022fc:	4b70      	ldr	r3, [pc, #448]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002300:	2203      	movs	r2, #3
 8002302:	4393      	bics	r3, r2
 8002304:	0019      	movs	r1, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	4b6d      	ldr	r3, [pc, #436]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800230c:	430a      	orrs	r2, r1
 800230e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2202      	movs	r2, #2
 8002316:	4013      	ands	r3, r2
 8002318:	d009      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800231a:	4b69      	ldr	r3, [pc, #420]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800231c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231e:	220c      	movs	r2, #12
 8002320:	4393      	bics	r3, r2
 8002322:	0019      	movs	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	4b65      	ldr	r3, [pc, #404]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232a:	430a      	orrs	r2, r1
 800232c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2210      	movs	r2, #16
 8002334:	4013      	ands	r3, r2
 8002336:	d009      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002338:	4b61      	ldr	r3, [pc, #388]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233c:	4a66      	ldr	r2, [pc, #408]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800233e:	4013      	ands	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	4b5e      	ldr	r3, [pc, #376]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002348:	430a      	orrs	r2, r1
 800234a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2380      	movs	r3, #128	@ 0x80
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4013      	ands	r3, r2
 8002356:	d009      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002358:	4b59      	ldr	r3, [pc, #356]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800235a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235c:	4a5f      	ldr	r2, [pc, #380]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800235e:	4013      	ands	r3, r2
 8002360:	0019      	movs	r1, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	4b56      	ldr	r3, [pc, #344]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002368:	430a      	orrs	r2, r1
 800236a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2380      	movs	r3, #128	@ 0x80
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4013      	ands	r3, r2
 8002376:	d009      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002378:	4b51      	ldr	r3, [pc, #324]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800237a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237c:	4a58      	ldr	r2, [pc, #352]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800237e:	4013      	ands	r3, r2
 8002380:	0019      	movs	r1, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	4b4e      	ldr	r3, [pc, #312]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002388:	430a      	orrs	r2, r1
 800238a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2220      	movs	r2, #32
 8002392:	4013      	ands	r3, r2
 8002394:	d009      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002396:	4b4a      	ldr	r3, [pc, #296]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239a:	4a52      	ldr	r2, [pc, #328]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800239c:	4013      	ands	r3, r2
 800239e:	0019      	movs	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	4b46      	ldr	r3, [pc, #280]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a6:	430a      	orrs	r2, r1
 80023a8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	2380      	movs	r3, #128	@ 0x80
 80023b0:	01db      	lsls	r3, r3, #7
 80023b2:	4013      	ands	r3, r2
 80023b4:	d015      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023b6:	4b42      	ldr	r3, [pc, #264]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	0899      	lsrs	r1, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1a      	ldr	r2, [r3, #32]
 80023c2:	4b3f      	ldr	r3, [pc, #252]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c4:	430a      	orrs	r2, r1
 80023c6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1a      	ldr	r2, [r3, #32]
 80023cc:	2380      	movs	r3, #128	@ 0x80
 80023ce:	05db      	lsls	r3, r3, #23
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d106      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023d4:	4b3a      	ldr	r3, [pc, #232]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	4b39      	ldr	r3, [pc, #228]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023da:	2180      	movs	r1, #128	@ 0x80
 80023dc:	0249      	lsls	r1, r1, #9
 80023de:	430a      	orrs	r2, r1
 80023e0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	2380      	movs	r3, #128	@ 0x80
 80023e8:	031b      	lsls	r3, r3, #12
 80023ea:	4013      	ands	r3, r2
 80023ec:	d009      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023ee:	4b34      	ldr	r3, [pc, #208]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f2:	2240      	movs	r2, #64	@ 0x40
 80023f4:	4393      	bics	r3, r2
 80023f6:	0019      	movs	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023fc:	4b30      	ldr	r3, [pc, #192]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023fe:	430a      	orrs	r2, r1
 8002400:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	2380      	movs	r3, #128	@ 0x80
 8002408:	039b      	lsls	r3, r3, #14
 800240a:	4013      	ands	r3, r2
 800240c:	d016      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800240e:	4b2c      	ldr	r3, [pc, #176]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002412:	4a35      	ldr	r2, [pc, #212]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002414:	4013      	ands	r3, r2
 8002416:	0019      	movs	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800241c:	4b28      	ldr	r3, [pc, #160]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800241e:	430a      	orrs	r2, r1
 8002420:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002426:	2380      	movs	r3, #128	@ 0x80
 8002428:	03db      	lsls	r3, r3, #15
 800242a:	429a      	cmp	r2, r3
 800242c:	d106      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800242e:	4b24      	ldr	r3, [pc, #144]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	4b23      	ldr	r3, [pc, #140]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002434:	2180      	movs	r1, #128	@ 0x80
 8002436:	0449      	lsls	r1, r1, #17
 8002438:	430a      	orrs	r2, r1
 800243a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2380      	movs	r3, #128	@ 0x80
 8002442:	03db      	lsls	r3, r3, #15
 8002444:	4013      	ands	r3, r2
 8002446:	d016      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002448:	4b1d      	ldr	r3, [pc, #116]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800244a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244c:	4a27      	ldr	r2, [pc, #156]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800244e:	4013      	ands	r3, r2
 8002450:	0019      	movs	r1, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002456:	4b1a      	ldr	r3, [pc, #104]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002458:	430a      	orrs	r2, r1
 800245a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002460:	2380      	movs	r3, #128	@ 0x80
 8002462:	045b      	lsls	r3, r3, #17
 8002464:	429a      	cmp	r2, r3
 8002466:	d106      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002468:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	4b14      	ldr	r3, [pc, #80]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800246e:	2180      	movs	r1, #128	@ 0x80
 8002470:	0449      	lsls	r1, r1, #17
 8002472:	430a      	orrs	r2, r1
 8002474:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	2380      	movs	r3, #128	@ 0x80
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	4013      	ands	r3, r2
 8002480:	d016      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002482:	4b0f      	ldr	r3, [pc, #60]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002486:	4a1a      	ldr	r2, [pc, #104]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002488:	4013      	ands	r3, r2
 800248a:	0019      	movs	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002492:	430a      	orrs	r2, r1
 8002494:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	01db      	lsls	r3, r3, #7
 800249e:	429a      	cmp	r2, r3
 80024a0:	d106      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024a2:	4b07      	ldr	r3, [pc, #28]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a8:	2180      	movs	r1, #128	@ 0x80
 80024aa:	0249      	lsls	r1, r1, #9
 80024ac:	430a      	orrs	r2, r1
 80024ae:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80024b0:	2312      	movs	r3, #18
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	781b      	ldrb	r3, [r3, #0]
}
 80024b6:	0018      	movs	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b006      	add	sp, #24
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40007000 	.word	0x40007000
 80024c8:	fffffcff 	.word	0xfffffcff
 80024cc:	fffeffff 	.word	0xfffeffff
 80024d0:	00001388 	.word	0x00001388
 80024d4:	efffffff 	.word	0xefffffff
 80024d8:	fffff3ff 	.word	0xfffff3ff
 80024dc:	fff3ffff 	.word	0xfff3ffff
 80024e0:	ffcfffff 	.word	0xffcfffff
 80024e4:	ffffcfff 	.word	0xffffcfff
 80024e8:	ffbfffff 	.word	0xffbfffff
 80024ec:	feffffff 	.word	0xfeffffff
 80024f0:	ffff3fff 	.word	0xffff3fff

080024f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e055      	b.n	80025b2 <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2288      	movs	r2, #136	@ 0x88
 800250a:	589b      	ldr	r3, [r3, r2]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d116      	bne.n	800253e <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2284      	movs	r2, #132	@ 0x84
 8002514:	2100      	movs	r1, #0
 8002516:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	0018      	movs	r0, r3
 800251c:	f000 fe0e 	bl	800313c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	22c4      	movs	r2, #196	@ 0xc4
 8002524:	589b      	ldr	r3, [r3, r2]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d103      	bne.n	8002532 <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	21c4      	movs	r1, #196	@ 0xc4
 800252e:	4a23      	ldr	r2, [pc, #140]	@ (80025bc <HAL_UART_Init+0xc8>)
 8002530:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	22c4      	movs	r2, #196	@ 0xc4
 8002536:	589b      	ldr	r3, [r3, r2]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	0010      	movs	r0, r2
 800253c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2288      	movs	r2, #136	@ 0x88
 8002542:	2124      	movs	r1, #36	@ 0x24
 8002544:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2101      	movs	r1, #1
 8002552:	438a      	bics	r2, r1
 8002554:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	0018      	movs	r0, r3
 8002562:	f001 f8f9 	bl	8003758 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0018      	movs	r0, r3
 800256a:	f000 fe37 	bl	80031dc <UART_SetConfig>
 800256e:	0003      	movs	r3, r0
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e01c      	b.n	80025b2 <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	490f      	ldr	r1, [pc, #60]	@ (80025c0 <HAL_UART_Init+0xcc>)
 8002584:	400a      	ands	r2, r1
 8002586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	212a      	movs	r1, #42	@ 0x2a
 8002594:	438a      	bics	r2, r1
 8002596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2101      	movs	r1, #1
 80025a4:	430a      	orrs	r2, r1
 80025a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	0018      	movs	r0, r3
 80025ac:	f001 f988 	bl	80038c0 <UART_CheckIdleState>
 80025b0:	0003      	movs	r3, r0
}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b002      	add	sp, #8
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			@ (mov r8, r8)
 80025bc:	0800096d 	.word	0x0800096d
 80025c0:	ffffb7ff 	.word	0xffffb7ff

080025c4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	230b      	movs	r3, #11
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	1c0a      	adds	r2, r1, #0
 80025d4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d6:	2317      	movs	r3, #23
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2290      	movs	r2, #144	@ 0x90
 80025e8:	589b      	ldr	r3, [r3, r2]
 80025ea:	2240      	movs	r2, #64	@ 0x40
 80025ec:	431a      	orrs	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2190      	movs	r1, #144	@ 0x90
 80025f2:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e08f      	b.n	8002718 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2288      	movs	r2, #136	@ 0x88
 80025fc:	589b      	ldr	r3, [r3, r2]
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d157      	bne.n	80026b2 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8002602:	230b      	movs	r3, #11
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b0c      	cmp	r3, #12
 800260a:	d845      	bhi.n	8002698 <HAL_UART_RegisterCallback+0xd4>
 800260c:	009a      	lsls	r2, r3, #2
 800260e:	4b44      	ldr	r3, [pc, #272]	@ (8002720 <HAL_UART_RegisterCallback+0x15c>)
 8002610:	18d3      	adds	r3, r2, r3
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2194      	movs	r1, #148	@ 0x94
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	505a      	str	r2, [r3, r1]
        break;
 800261e:	e078      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2198      	movs	r1, #152	@ 0x98
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	505a      	str	r2, [r3, r1]
        break;
 8002628:	e073      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	219c      	movs	r1, #156	@ 0x9c
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	505a      	str	r2, [r3, r1]
        break;
 8002632:	e06e      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	21a0      	movs	r1, #160	@ 0xa0
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	505a      	str	r2, [r3, r1]
        break;
 800263c:	e069      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	21a4      	movs	r1, #164	@ 0xa4
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	505a      	str	r2, [r3, r1]
        break;
 8002646:	e064      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	21a8      	movs	r1, #168	@ 0xa8
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	505a      	str	r2, [r3, r1]
        break;
 8002650:	e05f      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	21ac      	movs	r1, #172	@ 0xac
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	505a      	str	r2, [r3, r1]
        break;
 800265a:	e05a      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	21b0      	movs	r1, #176	@ 0xb0
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	505a      	str	r2, [r3, r1]
        break;
 8002664:	e055      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	21b4      	movs	r1, #180	@ 0xb4
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	505a      	str	r2, [r3, r1]
        break;
 800266e:	e050      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	21b8      	movs	r1, #184	@ 0xb8
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	505a      	str	r2, [r3, r1]
        break;
 8002678:	e04b      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	21bc      	movs	r1, #188	@ 0xbc
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	505a      	str	r2, [r3, r1]
        break;
 8002682:	e046      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	21c4      	movs	r1, #196	@ 0xc4
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	505a      	str	r2, [r3, r1]
        break;
 800268c:	e041      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	21c8      	movs	r1, #200	@ 0xc8
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	505a      	str	r2, [r3, r1]
        break;
 8002696:	e03c      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2290      	movs	r2, #144	@ 0x90
 800269c:	589b      	ldr	r3, [r3, r2]
 800269e:	2240      	movs	r2, #64	@ 0x40
 80026a0:	431a      	orrs	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2190      	movs	r1, #144	@ 0x90
 80026a6:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 80026a8:	2317      	movs	r3, #23
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
        break;
 80026b0:	e02f      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2288      	movs	r2, #136	@ 0x88
 80026b6:	589b      	ldr	r3, [r3, r2]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d11e      	bne.n	80026fa <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 80026bc:	230b      	movs	r3, #11
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b0b      	cmp	r3, #11
 80026c4:	d002      	beq.n	80026cc <HAL_UART_RegisterCallback+0x108>
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d005      	beq.n	80026d6 <HAL_UART_RegisterCallback+0x112>
 80026ca:	e009      	b.n	80026e0 <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	21c4      	movs	r1, #196	@ 0xc4
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	505a      	str	r2, [r3, r1]
        break;
 80026d4:	e01d      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	21c8      	movs	r1, #200	@ 0xc8
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	505a      	str	r2, [r3, r1]
        break;
 80026de:	e018      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2290      	movs	r2, #144	@ 0x90
 80026e4:	589b      	ldr	r3, [r3, r2]
 80026e6:	2240      	movs	r2, #64	@ 0x40
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2190      	movs	r1, #144	@ 0x90
 80026ee:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 80026f0:	2317      	movs	r3, #23
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
        break;
 80026f8:	e00b      	b.n	8002712 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2290      	movs	r2, #144	@ 0x90
 80026fe:	589b      	ldr	r3, [r3, r2]
 8002700:	2240      	movs	r2, #64	@ 0x40
 8002702:	431a      	orrs	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2190      	movs	r1, #144	@ 0x90
 8002708:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 800270a:	2317      	movs	r3, #23
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	2201      	movs	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002712:	2317      	movs	r3, #23
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	781b      	ldrb	r3, [r3, #0]
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b006      	add	sp, #24
 800271e:	bd80      	pop	{r7, pc}
 8002720:	08005198 	.word	0x08005198

08002724 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	@ 0x28
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	1dbb      	adds	r3, r7, #6
 8002732:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2288      	movs	r2, #136	@ 0x88
 8002738:	589b      	ldr	r3, [r3, r2]
 800273a:	2b20      	cmp	r3, #32
 800273c:	d000      	beq.n	8002740 <HAL_UART_Transmit+0x1c>
 800273e:	e090      	b.n	8002862 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_UART_Transmit+0x2a>
 8002746:	1dbb      	adds	r3, r7, #6
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e088      	b.n	8002864 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	2380      	movs	r3, #128	@ 0x80
 8002758:	015b      	lsls	r3, r3, #5
 800275a:	429a      	cmp	r2, r3
 800275c:	d109      	bne.n	8002772 <HAL_UART_Transmit+0x4e>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d105      	bne.n	8002772 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2201      	movs	r2, #1
 800276a:	4013      	ands	r3, r2
 800276c:	d001      	beq.n	8002772 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e078      	b.n	8002864 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2290      	movs	r2, #144	@ 0x90
 8002776:	2100      	movs	r1, #0
 8002778:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2288      	movs	r2, #136	@ 0x88
 800277e:	2121      	movs	r1, #33	@ 0x21
 8002780:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002782:	f7fe fa61 	bl	8000c48 <HAL_GetTick>
 8002786:	0003      	movs	r3, r0
 8002788:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1dba      	adds	r2, r7, #6
 800278e:	2154      	movs	r1, #84	@ 0x54
 8002790:	8812      	ldrh	r2, [r2, #0]
 8002792:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1dba      	adds	r2, r7, #6
 8002798:	2156      	movs	r1, #86	@ 0x56
 800279a:	8812      	ldrh	r2, [r2, #0]
 800279c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	2380      	movs	r3, #128	@ 0x80
 80027a4:	015b      	lsls	r3, r3, #5
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d108      	bne.n	80027bc <HAL_UART_Transmit+0x98>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d104      	bne.n	80027bc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	e003      	b.n	80027c4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027c4:	e030      	b.n	8002828 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	0013      	movs	r3, r2
 80027d0:	2200      	movs	r2, #0
 80027d2:	2180      	movs	r1, #128	@ 0x80
 80027d4:	f001 f91e 	bl	8003a14 <UART_WaitOnFlagUntilTimeout>
 80027d8:	1e03      	subs	r3, r0, #0
 80027da:	d005      	beq.n	80027e8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2288      	movs	r2, #136	@ 0x88
 80027e0:	2120      	movs	r1, #32
 80027e2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e03d      	b.n	8002864 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10b      	bne.n	8002806 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	001a      	movs	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	05d2      	lsls	r2, r2, #23
 80027fa:	0dd2      	lsrs	r2, r2, #23
 80027fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	3302      	adds	r3, #2
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	e007      	b.n	8002816 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	781a      	ldrb	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	3301      	adds	r3, #1
 8002814:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2256      	movs	r2, #86	@ 0x56
 800281a:	5a9b      	ldrh	r3, [r3, r2]
 800281c:	b29b      	uxth	r3, r3
 800281e:	3b01      	subs	r3, #1
 8002820:	b299      	uxth	r1, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2256      	movs	r2, #86	@ 0x56
 8002826:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2256      	movs	r2, #86	@ 0x56
 800282c:	5a9b      	ldrh	r3, [r3, r2]
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1c8      	bne.n	80027c6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	0013      	movs	r3, r2
 800283e:	2200      	movs	r2, #0
 8002840:	2140      	movs	r1, #64	@ 0x40
 8002842:	f001 f8e7 	bl	8003a14 <UART_WaitOnFlagUntilTimeout>
 8002846:	1e03      	subs	r3, r0, #0
 8002848:	d005      	beq.n	8002856 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2288      	movs	r2, #136	@ 0x88
 800284e:	2120      	movs	r1, #32
 8002850:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e006      	b.n	8002864 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2288      	movs	r2, #136	@ 0x88
 800285a:	2120      	movs	r1, #32
 800285c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	e000      	b.n	8002864 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002862:	2302      	movs	r3, #2
  }
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	b008      	add	sp, #32
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	1dbb      	adds	r3, r7, #6
 8002878:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	228c      	movs	r2, #140	@ 0x8c
 800287e:	589b      	ldr	r3, [r3, r2]
 8002880:	2b20      	cmp	r3, #32
 8002882:	d14a      	bne.n	800291a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_UART_Receive_IT+0x26>
 800288a:	1dbb      	adds	r3, r7, #6
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e042      	b.n	800291c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	2380      	movs	r3, #128	@ 0x80
 800289c:	015b      	lsls	r3, r3, #5
 800289e:	429a      	cmp	r2, r3
 80028a0:	d109      	bne.n	80028b6 <HAL_UART_Receive_IT+0x4a>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d105      	bne.n	80028b6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	d001      	beq.n	80028b6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e032      	b.n	800291c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a18      	ldr	r2, [pc, #96]	@ (8002924 <HAL_UART_Receive_IT+0xb8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d020      	beq.n	8002908 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	2380      	movs	r3, #128	@ 0x80
 80028ce:	041b      	lsls	r3, r3, #16
 80028d0:	4013      	ands	r3, r2
 80028d2:	d019      	beq.n	8002908 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d4:	f3ef 8310 	mrs	r3, PRIMASK
 80028d8:	613b      	str	r3, [r7, #16]
  return(result);
 80028da:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	2301      	movs	r3, #1
 80028e0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f383 8810 	msr	PRIMASK, r3
}
 80028e8:	46c0      	nop			@ (mov r8, r8)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2180      	movs	r1, #128	@ 0x80
 80028f6:	04c9      	lsls	r1, r1, #19
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	f383 8810 	msr	PRIMASK, r3
}
 8002906:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002908:	1dbb      	adds	r3, r7, #6
 800290a:	881a      	ldrh	r2, [r3, #0]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	0018      	movs	r0, r3
 8002912:	f001 f8ef 	bl	8003af4 <UART_Start_Receive_IT>
 8002916:	0003      	movs	r3, r0
 8002918:	e000      	b.n	800291c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
  }
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b008      	add	sp, #32
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40008000 	.word	0x40008000

08002928 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	1dbb      	adds	r3, r7, #6
 8002934:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2288      	movs	r2, #136	@ 0x88
 800293a:	589b      	ldr	r3, [r3, r2]
 800293c:	2b20      	cmp	r3, #32
 800293e:	d000      	beq.n	8002942 <HAL_UART_Transmit_DMA+0x1a>
 8002940:	e079      	b.n	8002a36 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_UART_Transmit_DMA+0x28>
 8002948:	1dbb      	adds	r3, r7, #6
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e071      	b.n	8002a38 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	2380      	movs	r3, #128	@ 0x80
 800295a:	015b      	lsls	r3, r3, #5
 800295c:	429a      	cmp	r2, r3
 800295e:	d109      	bne.n	8002974 <HAL_UART_Transmit_DMA+0x4c>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2201      	movs	r2, #1
 800296c:	4013      	ands	r3, r2
 800296e:	d001      	beq.n	8002974 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e061      	b.n	8002a38 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1dba      	adds	r2, r7, #6
 800297e:	2154      	movs	r1, #84	@ 0x54
 8002980:	8812      	ldrh	r2, [r2, #0]
 8002982:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1dba      	adds	r2, r7, #6
 8002988:	2156      	movs	r1, #86	@ 0x56
 800298a:	8812      	ldrh	r2, [r2, #0]
 800298c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2290      	movs	r2, #144	@ 0x90
 8002992:	2100      	movs	r1, #0
 8002994:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2288      	movs	r2, #136	@ 0x88
 800299a:	2121      	movs	r1, #33	@ 0x21
 800299c:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d028      	beq.n	80029f8 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029aa:	4a25      	ldr	r2, [pc, #148]	@ (8002a40 <HAL_UART_Transmit_DMA+0x118>)
 80029ac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029b2:	4a24      	ldr	r2, [pc, #144]	@ (8002a44 <HAL_UART_Transmit_DMA+0x11c>)
 80029b4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029ba:	4a23      	ldr	r2, [pc, #140]	@ (8002a48 <HAL_UART_Transmit_DMA+0x120>)
 80029bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029c2:	2200      	movs	r2, #0
 80029c4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ce:	0019      	movs	r1, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3328      	adds	r3, #40	@ 0x28
 80029d6:	001a      	movs	r2, r3
 80029d8:	1dbb      	adds	r3, r7, #6
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	f7fe faca 	bl	8000f74 <HAL_DMA_Start_IT>
 80029e0:	1e03      	subs	r3, r0, #0
 80029e2:	d009      	beq.n	80029f8 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2290      	movs	r2, #144	@ 0x90
 80029e8:	2110      	movs	r1, #16
 80029ea:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2288      	movs	r2, #136	@ 0x88
 80029f0:	2120      	movs	r1, #32
 80029f2:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e01f      	b.n	8002a38 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2240      	movs	r2, #64	@ 0x40
 80029fe:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a00:	f3ef 8310 	mrs	r3, PRIMASK
 8002a04:	613b      	str	r3, [r7, #16]
  return(result);
 8002a06:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f383 8810 	msr	PRIMASK, r3
}
 8002a14:	46c0      	nop			@ (mov r8, r8)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2180      	movs	r1, #128	@ 0x80
 8002a22:	430a      	orrs	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	f383 8810 	msr	PRIMASK, r3
}
 8002a30:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
  }
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b008      	add	sp, #32
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	08003fd5 	.word	0x08003fd5
 8002a44:	08004071 	.word	0x08004071
 8002a48:	08004211 	.word	0x08004211

08002a4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a4c:	b5b0      	push	{r4, r5, r7, lr}
 8002a4e:	b0aa      	sub	sp, #168	@ 0xa8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	22a4      	movs	r2, #164	@ 0xa4
 8002a5c:	18b9      	adds	r1, r7, r2
 8002a5e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	20a0      	movs	r0, #160	@ 0xa0
 8002a68:	1839      	adds	r1, r7, r0
 8002a6a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	249c      	movs	r4, #156	@ 0x9c
 8002a74:	1939      	adds	r1, r7, r4
 8002a76:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a78:	0011      	movs	r1, r2
 8002a7a:	18bb      	adds	r3, r7, r2
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4aa5      	ldr	r2, [pc, #660]	@ (8002d14 <HAL_UART_IRQHandler+0x2c8>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	2298      	movs	r2, #152	@ 0x98
 8002a84:	18bd      	adds	r5, r7, r2
 8002a86:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002a88:	18bb      	adds	r3, r7, r2
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d11a      	bne.n	8002ac6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2220      	movs	r2, #32
 8002a96:	4013      	ands	r3, r2
 8002a98:	d015      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a9a:	183b      	adds	r3, r7, r0
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d105      	bne.n	8002ab0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002aa4:	193b      	adds	r3, r7, r4
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	2380      	movs	r3, #128	@ 0x80
 8002aaa:	055b      	lsls	r3, r3, #21
 8002aac:	4013      	ands	r3, r2
 8002aae:	d00a      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d100      	bne.n	8002aba <HAL_UART_IRQHandler+0x6e>
 8002ab8:	e2ea      	b.n	8003090 <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	0010      	movs	r0, r2
 8002ac2:	4798      	blx	r3
      }
      return;
 8002ac4:	e2e4      	b.n	8003090 <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ac6:	2398      	movs	r3, #152	@ 0x98
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d100      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x86>
 8002ad0:	e128      	b.n	8002d24 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002ad2:	239c      	movs	r3, #156	@ 0x9c
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a8f      	ldr	r2, [pc, #572]	@ (8002d18 <HAL_UART_IRQHandler+0x2cc>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	d106      	bne.n	8002aec <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ade:	23a0      	movs	r3, #160	@ 0xa0
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a8d      	ldr	r2, [pc, #564]	@ (8002d1c <HAL_UART_IRQHandler+0x2d0>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d100      	bne.n	8002aec <HAL_UART_IRQHandler+0xa0>
 8002aea:	e11b      	b.n	8002d24 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002aec:	23a4      	movs	r3, #164	@ 0xa4
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2201      	movs	r2, #1
 8002af4:	4013      	ands	r3, r2
 8002af6:	d012      	beq.n	8002b1e <HAL_UART_IRQHandler+0xd2>
 8002af8:	23a0      	movs	r3, #160	@ 0xa0
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4013      	ands	r3, r2
 8002b04:	d00b      	beq.n	8002b1e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2290      	movs	r2, #144	@ 0x90
 8002b12:	589b      	ldr	r3, [r3, r2]
 8002b14:	2201      	movs	r2, #1
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2190      	movs	r1, #144	@ 0x90
 8002b1c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b1e:	23a4      	movs	r3, #164	@ 0xa4
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2202      	movs	r2, #2
 8002b26:	4013      	ands	r3, r2
 8002b28:	d011      	beq.n	8002b4e <HAL_UART_IRQHandler+0x102>
 8002b2a:	239c      	movs	r3, #156	@ 0x9c
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2201      	movs	r2, #1
 8002b32:	4013      	ands	r3, r2
 8002b34:	d00b      	beq.n	8002b4e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2290      	movs	r2, #144	@ 0x90
 8002b42:	589b      	ldr	r3, [r3, r2]
 8002b44:	2204      	movs	r2, #4
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2190      	movs	r1, #144	@ 0x90
 8002b4c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b4e:	23a4      	movs	r3, #164	@ 0xa4
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2204      	movs	r2, #4
 8002b56:	4013      	ands	r3, r2
 8002b58:	d011      	beq.n	8002b7e <HAL_UART_IRQHandler+0x132>
 8002b5a:	239c      	movs	r3, #156	@ 0x9c
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2201      	movs	r2, #1
 8002b62:	4013      	ands	r3, r2
 8002b64:	d00b      	beq.n	8002b7e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2290      	movs	r2, #144	@ 0x90
 8002b72:	589b      	ldr	r3, [r3, r2]
 8002b74:	2202      	movs	r2, #2
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2190      	movs	r1, #144	@ 0x90
 8002b7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b7e:	23a4      	movs	r3, #164	@ 0xa4
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2208      	movs	r2, #8
 8002b86:	4013      	ands	r3, r2
 8002b88:	d017      	beq.n	8002bba <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b8a:	23a0      	movs	r3, #160	@ 0xa0
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2220      	movs	r2, #32
 8002b92:	4013      	ands	r3, r2
 8002b94:	d105      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002b96:	239c      	movs	r3, #156	@ 0x9c
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a5e      	ldr	r2, [pc, #376]	@ (8002d18 <HAL_UART_IRQHandler+0x2cc>)
 8002b9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ba0:	d00b      	beq.n	8002bba <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2208      	movs	r2, #8
 8002ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2290      	movs	r2, #144	@ 0x90
 8002bae:	589b      	ldr	r3, [r3, r2]
 8002bb0:	2208      	movs	r2, #8
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2190      	movs	r1, #144	@ 0x90
 8002bb8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bba:	23a4      	movs	r3, #164	@ 0xa4
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d013      	beq.n	8002bf0 <HAL_UART_IRQHandler+0x1a4>
 8002bc8:	23a0      	movs	r3, #160	@ 0xa0
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	2380      	movs	r3, #128	@ 0x80
 8002bd0:	04db      	lsls	r3, r3, #19
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d00c      	beq.n	8002bf0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2280      	movs	r2, #128	@ 0x80
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2290      	movs	r2, #144	@ 0x90
 8002be4:	589b      	ldr	r3, [r3, r2]
 8002be6:	2220      	movs	r2, #32
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2190      	movs	r1, #144	@ 0x90
 8002bee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2290      	movs	r2, #144	@ 0x90
 8002bf4:	589b      	ldr	r3, [r3, r2]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d100      	bne.n	8002bfc <HAL_UART_IRQHandler+0x1b0>
 8002bfa:	e24b      	b.n	8003094 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002bfc:	23a4      	movs	r3, #164	@ 0xa4
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2220      	movs	r2, #32
 8002c04:	4013      	ands	r3, r2
 8002c06:	d015      	beq.n	8002c34 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c08:	23a0      	movs	r3, #160	@ 0xa0
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	4013      	ands	r3, r2
 8002c12:	d106      	bne.n	8002c22 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c14:	239c      	movs	r3, #156	@ 0x9c
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	2380      	movs	r3, #128	@ 0x80
 8002c1c:	055b      	lsls	r3, r3, #21
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d008      	beq.n	8002c34 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d004      	beq.n	8002c34 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	0010      	movs	r0, r2
 8002c32:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2290      	movs	r2, #144	@ 0x90
 8002c38:	589b      	ldr	r3, [r3, r2]
 8002c3a:	2194      	movs	r1, #148	@ 0x94
 8002c3c:	187a      	adds	r2, r7, r1
 8002c3e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2240      	movs	r2, #64	@ 0x40
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b40      	cmp	r3, #64	@ 0x40
 8002c4c:	d004      	beq.n	8002c58 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c4e:	187b      	adds	r3, r7, r1
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2228      	movs	r2, #40	@ 0x28
 8002c54:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c56:	d050      	beq.n	8002cfa <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f001 f954 	bl	8003f08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2240      	movs	r2, #64	@ 0x40
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b40      	cmp	r3, #64	@ 0x40
 8002c6c:	d13e      	bne.n	8002cec <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c72:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002c74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c76:	2090      	movs	r0, #144	@ 0x90
 8002c78:	183a      	adds	r2, r7, r0
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c82:	f383 8810 	msr	PRIMASK, r3
}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2140      	movs	r1, #64	@ 0x40
 8002c94:	438a      	bics	r2, r1
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	183b      	adds	r3, r7, r0
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ca0:	f383 8810 	msr	PRIMASK, r3
}
 8002ca4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2280      	movs	r2, #128	@ 0x80
 8002caa:	589b      	ldr	r3, [r3, r2]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d016      	beq.n	8002cde <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2280      	movs	r2, #128	@ 0x80
 8002cb4:	589b      	ldr	r3, [r3, r2]
 8002cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d20 <HAL_UART_IRQHandler+0x2d4>)
 8002cb8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2280      	movs	r2, #128	@ 0x80
 8002cbe:	589b      	ldr	r3, [r3, r2]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7fe fa3f 	bl	8001144 <HAL_DMA_Abort_IT>
 8002cc6:	1e03      	subs	r3, r0, #0
 8002cc8:	d022      	beq.n	8002d10 <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2280      	movs	r2, #128	@ 0x80
 8002cce:	589b      	ldr	r3, [r3, r2]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	2180      	movs	r1, #128	@ 0x80
 8002cd6:	5852      	ldr	r2, [r2, r1]
 8002cd8:	0010      	movs	r0, r2
 8002cda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cdc:	e018      	b.n	8002d10 <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	22a4      	movs	r2, #164	@ 0xa4
 8002ce2:	589b      	ldr	r3, [r3, r2]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	0010      	movs	r0, r2
 8002ce8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cea:	e011      	b.n	8002d10 <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	22a4      	movs	r2, #164	@ 0xa4
 8002cf0:	589b      	ldr	r3, [r3, r2]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	0010      	movs	r0, r2
 8002cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf8:	e00a      	b.n	8002d10 <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	22a4      	movs	r2, #164	@ 0xa4
 8002cfe:	589b      	ldr	r3, [r3, r2]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	0010      	movs	r0, r2
 8002d04:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2290      	movs	r2, #144	@ 0x90
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002d0e:	e1c1      	b.n	8003094 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d10:	46c0      	nop			@ (mov r8, r8)
    return;
 8002d12:	e1bf      	b.n	8003094 <HAL_UART_IRQHandler+0x648>
 8002d14:	0000080f 	.word	0x0000080f
 8002d18:	10000001 	.word	0x10000001
 8002d1c:	04000120 	.word	0x04000120
 8002d20:	0800429b 	.word	0x0800429b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d000      	beq.n	8002d2e <HAL_UART_IRQHandler+0x2e2>
 8002d2c:	e140      	b.n	8002fb0 <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d2e:	23a4      	movs	r3, #164	@ 0xa4
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2210      	movs	r2, #16
 8002d36:	4013      	ands	r3, r2
 8002d38:	d100      	bne.n	8002d3c <HAL_UART_IRQHandler+0x2f0>
 8002d3a:	e139      	b.n	8002fb0 <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d3c:	23a0      	movs	r3, #160	@ 0xa0
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2210      	movs	r2, #16
 8002d44:	4013      	ands	r3, r2
 8002d46:	d100      	bne.n	8002d4a <HAL_UART_IRQHandler+0x2fe>
 8002d48:	e132      	b.n	8002fb0 <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2210      	movs	r2, #16
 8002d50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2240      	movs	r2, #64	@ 0x40
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b40      	cmp	r3, #64	@ 0x40
 8002d5e:	d000      	beq.n	8002d62 <HAL_UART_IRQHandler+0x316>
 8002d60:	e0a5      	b.n	8002eae <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2280      	movs	r2, #128	@ 0x80
 8002d66:	589b      	ldr	r3, [r3, r2]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	217e      	movs	r1, #126	@ 0x7e
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002d72:	187b      	adds	r3, r7, r1
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d100      	bne.n	8002d7c <HAL_UART_IRQHandler+0x330>
 8002d7a:	e18d      	b.n	8003098 <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	225c      	movs	r2, #92	@ 0x5c
 8002d80:	5a9b      	ldrh	r3, [r3, r2]
 8002d82:	187a      	adds	r2, r7, r1
 8002d84:	8812      	ldrh	r2, [r2, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d300      	bcc.n	8002d8c <HAL_UART_IRQHandler+0x340>
 8002d8a:	e185      	b.n	8003098 <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	187a      	adds	r2, r7, r1
 8002d90:	215e      	movs	r1, #94	@ 0x5e
 8002d92:	8812      	ldrh	r2, [r2, #0]
 8002d94:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2280      	movs	r2, #128	@ 0x80
 8002d9a:	589b      	ldr	r3, [r3, r2]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2220      	movs	r2, #32
 8002da2:	4013      	ands	r3, r2
 8002da4:	d170      	bne.n	8002e88 <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da6:	f3ef 8310 	mrs	r3, PRIMASK
 8002daa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dae:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002db0:	2301      	movs	r3, #1
 8002db2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db6:	f383 8810 	msr	PRIMASK, r3
}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	49b8      	ldr	r1, [pc, #736]	@ (80030a8 <HAL_UART_IRQHandler+0x65c>)
 8002dc8:	400a      	ands	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dce:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd2:	f383 8810 	msr	PRIMASK, r3
}
 8002dd6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de0:	677b      	str	r3, [r7, #116]	@ 0x74
 8002de2:	2301      	movs	r3, #1
 8002de4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002de8:	f383 8810 	msr	PRIMASK, r3
}
 8002dec:	46c0      	nop			@ (mov r8, r8)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2101      	movs	r1, #1
 8002dfa:	438a      	bics	r2, r1
 8002dfc:	609a      	str	r2, [r3, #8]
 8002dfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e00:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e04:	f383 8810 	msr	PRIMASK, r3
}
 8002e08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e12:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e14:	2301      	movs	r3, #1
 8002e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e1a:	f383 8810 	msr	PRIMASK, r3
}
 8002e1e:	46c0      	nop			@ (mov r8, r8)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2140      	movs	r1, #64	@ 0x40
 8002e2c:	438a      	bics	r2, r1
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e32:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e36:	f383 8810 	msr	PRIMASK, r3
}
 8002e3a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	228c      	movs	r2, #140	@ 0x8c
 8002e40:	2120      	movs	r1, #32
 8002e42:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e4e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e54:	2301      	movs	r3, #1
 8002e56:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e5a:	f383 8810 	msr	PRIMASK, r3
}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2110      	movs	r1, #16
 8002e6c:	438a      	bics	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e72:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e76:	f383 8810 	msr	PRIMASK, r3
}
 8002e7a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2280      	movs	r2, #128	@ 0x80
 8002e80:	589b      	ldr	r3, [r3, r2]
 8002e82:	0018      	movs	r0, r3
 8002e84:	f7fe f8fc 	bl	8001080 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	22c0      	movs	r2, #192	@ 0xc0
 8002e92:	589b      	ldr	r3, [r3, r2]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	215c      	movs	r1, #92	@ 0x5c
 8002e98:	5a51      	ldrh	r1, [r2, r1]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	205e      	movs	r0, #94	@ 0x5e
 8002e9e:	5a12      	ldrh	r2, [r2, r0]
 8002ea0:	b292      	uxth	r2, r2
 8002ea2:	1a8a      	subs	r2, r1, r2
 8002ea4:	b291      	uxth	r1, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	0010      	movs	r0, r2
 8002eaa:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002eac:	e0f4      	b.n	8003098 <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	225c      	movs	r2, #92	@ 0x5c
 8002eb2:	5a99      	ldrh	r1, [r3, r2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	225e      	movs	r2, #94	@ 0x5e
 8002eb8:	5a9b      	ldrh	r3, [r3, r2]
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	208e      	movs	r0, #142	@ 0x8e
 8002ebe:	183b      	adds	r3, r7, r0
 8002ec0:	1a8a      	subs	r2, r1, r2
 8002ec2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	225e      	movs	r2, #94	@ 0x5e
 8002ec8:	5a9b      	ldrh	r3, [r3, r2]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d100      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x486>
 8002ed0:	e0e4      	b.n	800309c <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 8002ed2:	183b      	adds	r3, r7, r0
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d100      	bne.n	8002edc <HAL_UART_IRQHandler+0x490>
 8002eda:	e0df      	b.n	800309c <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002edc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ee4:	2488      	movs	r4, #136	@ 0x88
 8002ee6:	193a      	adds	r2, r7, r4
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	2301      	movs	r3, #1
 8002eec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f383 8810 	msr	PRIMASK, r3
}
 8002ef4:	46c0      	nop			@ (mov r8, r8)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	496a      	ldr	r1, [pc, #424]	@ (80030ac <HAL_UART_IRQHandler+0x660>)
 8002f02:	400a      	ands	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	193b      	adds	r3, r7, r4
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f383 8810 	msr	PRIMASK, r3
}
 8002f12:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f14:	f3ef 8310 	mrs	r3, PRIMASK
 8002f18:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f1a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f1c:	2484      	movs	r4, #132	@ 0x84
 8002f1e:	193a      	adds	r2, r7, r4
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	2301      	movs	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f383 8810 	msr	PRIMASK, r3
}
 8002f2c:	46c0      	nop			@ (mov r8, r8)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	495d      	ldr	r1, [pc, #372]	@ (80030b0 <HAL_UART_IRQHandler+0x664>)
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	609a      	str	r2, [r3, #8]
 8002f3e:	193b      	adds	r3, r7, r4
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	f383 8810 	msr	PRIMASK, r3
}
 8002f4a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	228c      	movs	r2, #140	@ 0x8c
 8002f50:	2120      	movs	r1, #32
 8002f52:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f60:	f3ef 8310 	mrs	r3, PRIMASK
 8002f64:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f68:	2480      	movs	r4, #128	@ 0x80
 8002f6a:	193a      	adds	r2, r7, r4
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	2301      	movs	r3, #1
 8002f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f74:	f383 8810 	msr	PRIMASK, r3
}
 8002f78:	46c0      	nop			@ (mov r8, r8)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2110      	movs	r1, #16
 8002f86:	438a      	bics	r2, r1
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f92:	f383 8810 	msr	PRIMASK, r3
}
 8002f96:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	22c0      	movs	r2, #192	@ 0xc0
 8002fa2:	589b      	ldr	r3, [r3, r2]
 8002fa4:	183a      	adds	r2, r7, r0
 8002fa6:	8811      	ldrh	r1, [r2, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	0010      	movs	r0, r2
 8002fac:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fae:	e075      	b.n	800309c <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fb0:	23a4      	movs	r3, #164	@ 0xa4
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	2380      	movs	r3, #128	@ 0x80
 8002fb8:	035b      	lsls	r3, r3, #13
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d012      	beq.n	8002fe4 <HAL_UART_IRQHandler+0x598>
 8002fbe:	239c      	movs	r3, #156	@ 0x9c
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	2380      	movs	r3, #128	@ 0x80
 8002fc6:	03db      	lsls	r3, r3, #15
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d00b      	beq.n	8002fe4 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2280      	movs	r2, #128	@ 0x80
 8002fd2:	0352      	lsls	r2, r2, #13
 8002fd4:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	22b4      	movs	r2, #180	@ 0xb4
 8002fda:	589b      	ldr	r3, [r3, r2]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	0010      	movs	r0, r2
 8002fe0:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fe2:	e05e      	b.n	80030a2 <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002fe4:	23a4      	movs	r3, #164	@ 0xa4
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2280      	movs	r2, #128	@ 0x80
 8002fec:	4013      	ands	r3, r2
 8002fee:	d016      	beq.n	800301e <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002ff0:	23a0      	movs	r3, #160	@ 0xa0
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2280      	movs	r2, #128	@ 0x80
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d106      	bne.n	800300a <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002ffc:	239c      	movs	r3, #156	@ 0x9c
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	2380      	movs	r3, #128	@ 0x80
 8003004:	041b      	lsls	r3, r3, #16
 8003006:	4013      	ands	r3, r2
 8003008:	d009      	beq.n	800301e <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800300e:	2b00      	cmp	r3, #0
 8003010:	d046      	beq.n	80030a0 <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	0010      	movs	r0, r2
 800301a:	4798      	blx	r3
    }
    return;
 800301c:	e040      	b.n	80030a0 <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800301e:	23a4      	movs	r3, #164	@ 0xa4
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2240      	movs	r2, #64	@ 0x40
 8003026:	4013      	ands	r3, r2
 8003028:	d00a      	beq.n	8003040 <HAL_UART_IRQHandler+0x5f4>
 800302a:	23a0      	movs	r3, #160	@ 0xa0
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2240      	movs	r2, #64	@ 0x40
 8003032:	4013      	ands	r3, r2
 8003034:	d004      	beq.n	8003040 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	0018      	movs	r0, r3
 800303a:	f001 f947 	bl	80042cc <UART_EndTransmit_IT>
    return;
 800303e:	e030      	b.n	80030a2 <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003040:	23a4      	movs	r3, #164	@ 0xa4
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	2380      	movs	r3, #128	@ 0x80
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	4013      	ands	r3, r2
 800304c:	d00d      	beq.n	800306a <HAL_UART_IRQHandler+0x61e>
 800304e:	23a0      	movs	r3, #160	@ 0xa0
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	2380      	movs	r3, #128	@ 0x80
 8003056:	05db      	lsls	r3, r3, #23
 8003058:	4013      	ands	r3, r2
 800305a:	d006      	beq.n	800306a <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	22bc      	movs	r2, #188	@ 0xbc
 8003060:	589b      	ldr	r3, [r3, r2]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	0010      	movs	r0, r2
 8003066:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003068:	e01b      	b.n	80030a2 <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800306a:	23a4      	movs	r3, #164	@ 0xa4
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	2380      	movs	r3, #128	@ 0x80
 8003072:	045b      	lsls	r3, r3, #17
 8003074:	4013      	ands	r3, r2
 8003076:	d014      	beq.n	80030a2 <HAL_UART_IRQHandler+0x656>
 8003078:	23a0      	movs	r3, #160	@ 0xa0
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	da0f      	bge.n	80030a2 <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	22b8      	movs	r2, #184	@ 0xb8
 8003086:	589b      	ldr	r3, [r3, r2]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	0010      	movs	r0, r2
 800308c:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800308e:	e008      	b.n	80030a2 <HAL_UART_IRQHandler+0x656>
      return;
 8003090:	46c0      	nop			@ (mov r8, r8)
 8003092:	e006      	b.n	80030a2 <HAL_UART_IRQHandler+0x656>
    return;
 8003094:	46c0      	nop			@ (mov r8, r8)
 8003096:	e004      	b.n	80030a2 <HAL_UART_IRQHandler+0x656>
      return;
 8003098:	46c0      	nop			@ (mov r8, r8)
 800309a:	e002      	b.n	80030a2 <HAL_UART_IRQHandler+0x656>
      return;
 800309c:	46c0      	nop			@ (mov r8, r8)
 800309e:	e000      	b.n	80030a2 <HAL_UART_IRQHandler+0x656>
    return;
 80030a0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b02a      	add	sp, #168	@ 0xa8
 80030a6:	bdb0      	pop	{r4, r5, r7, pc}
 80030a8:	fffffeff 	.word	0xfffffeff
 80030ac:	fffffedf 	.word	0xfffffedf
 80030b0:	effffffe 	.word	0xeffffffe

080030b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030bc:	46c0      	nop			@ (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b002      	add	sp, #8
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80030cc:	46c0      	nop			@ (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b002      	add	sp, #8
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80030dc:	46c0      	nop			@ (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030ec:	46c0      	nop			@ (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80030fc:	46c0      	nop			@ (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800310c:	46c0      	nop			@ (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800311c:	46c0      	nop			@ (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	000a      	movs	r2, r1
 800312e:	1cbb      	adds	r3, r7, #2
 8003130:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	b002      	add	sp, #8
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2194      	movs	r1, #148	@ 0x94
 8003148:	4a18      	ldr	r2, [pc, #96]	@ (80031ac <UART_InitCallbacksToDefault+0x70>)
 800314a:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2198      	movs	r1, #152	@ 0x98
 8003150:	4a17      	ldr	r2, [pc, #92]	@ (80031b0 <UART_InitCallbacksToDefault+0x74>)
 8003152:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	219c      	movs	r1, #156	@ 0x9c
 8003158:	4a16      	ldr	r2, [pc, #88]	@ (80031b4 <UART_InitCallbacksToDefault+0x78>)
 800315a:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	21a0      	movs	r1, #160	@ 0xa0
 8003160:	4a15      	ldr	r2, [pc, #84]	@ (80031b8 <UART_InitCallbacksToDefault+0x7c>)
 8003162:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	21a4      	movs	r1, #164	@ 0xa4
 8003168:	4a14      	ldr	r2, [pc, #80]	@ (80031bc <UART_InitCallbacksToDefault+0x80>)
 800316a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	21a8      	movs	r1, #168	@ 0xa8
 8003170:	4a13      	ldr	r2, [pc, #76]	@ (80031c0 <UART_InitCallbacksToDefault+0x84>)
 8003172:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	21ac      	movs	r1, #172	@ 0xac
 8003178:	4a12      	ldr	r2, [pc, #72]	@ (80031c4 <UART_InitCallbacksToDefault+0x88>)
 800317a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	21b0      	movs	r1, #176	@ 0xb0
 8003180:	4a11      	ldr	r2, [pc, #68]	@ (80031c8 <UART_InitCallbacksToDefault+0x8c>)
 8003182:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	21b4      	movs	r1, #180	@ 0xb4
 8003188:	4a10      	ldr	r2, [pc, #64]	@ (80031cc <UART_InitCallbacksToDefault+0x90>)
 800318a:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	21b8      	movs	r1, #184	@ 0xb8
 8003190:	4a0f      	ldr	r2, [pc, #60]	@ (80031d0 <UART_InitCallbacksToDefault+0x94>)
 8003192:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	21bc      	movs	r1, #188	@ 0xbc
 8003198:	4a0e      	ldr	r2, [pc, #56]	@ (80031d4 <UART_InitCallbacksToDefault+0x98>)
 800319a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	21c0      	movs	r1, #192	@ 0xc0
 80031a0:	4a0d      	ldr	r2, [pc, #52]	@ (80031d8 <UART_InitCallbacksToDefault+0x9c>)
 80031a2:	505a      	str	r2, [r3, r1]

}
 80031a4:	46c0      	nop			@ (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b002      	add	sp, #8
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	080030c5 	.word	0x080030c5
 80031b0:	080030b5 	.word	0x080030b5
 80031b4:	080030d5 	.word	0x080030d5
 80031b8:	080007bd 	.word	0x080007bd
 80031bc:	080030e5 	.word	0x080030e5
 80031c0:	080030f5 	.word	0x080030f5
 80031c4:	08003105 	.word	0x08003105
 80031c8:	08003115 	.word	0x08003115
 80031cc:	08004d69 	.word	0x08004d69
 80031d0:	08004d79 	.word	0x08004d79
 80031d4:	08004d89 	.word	0x08004d89
 80031d8:	08003125 	.word	0x08003125

080031dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031dc:	b5b0      	push	{r4, r5, r7, lr}
 80031de:	b090      	sub	sp, #64	@ 0x40
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031e4:	231a      	movs	r3, #26
 80031e6:	2220      	movs	r2, #32
 80031e8:	189b      	adds	r3, r3, r2
 80031ea:	19db      	adds	r3, r3, r7
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	431a      	orrs	r2, r3
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	4313      	orrs	r3, r2
 8003206:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4aaf      	ldr	r2, [pc, #700]	@ (80034cc <UART_SetConfig+0x2f0>)
 8003210:	4013      	ands	r3, r2
 8003212:	0019      	movs	r1, r3
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800321a:	430b      	orrs	r3, r1
 800321c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4aaa      	ldr	r2, [pc, #680]	@ (80034d0 <UART_SetConfig+0x2f4>)
 8003226:	4013      	ands	r3, r2
 8003228:	0018      	movs	r0, r3
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	68d9      	ldr	r1, [r3, #12]
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	0003      	movs	r3, r0
 8003234:	430b      	orrs	r3, r1
 8003236:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4aa4      	ldr	r2, [pc, #656]	@ (80034d4 <UART_SetConfig+0x2f8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d004      	beq.n	8003252 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800324e:	4313      	orrs	r3, r2
 8003250:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	4a9f      	ldr	r2, [pc, #636]	@ (80034d8 <UART_SetConfig+0x2fc>)
 800325a:	4013      	ands	r3, r2
 800325c:	0019      	movs	r1, r3
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003264:	430b      	orrs	r3, r1
 8003266:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326e:	220f      	movs	r2, #15
 8003270:	4393      	bics	r3, r2
 8003272:	0018      	movs	r0, r3
 8003274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003276:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	0003      	movs	r3, r0
 800327e:	430b      	orrs	r3, r1
 8003280:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a95      	ldr	r2, [pc, #596]	@ (80034dc <UART_SetConfig+0x300>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d131      	bne.n	80032f0 <UART_SetConfig+0x114>
 800328c:	4b94      	ldr	r3, [pc, #592]	@ (80034e0 <UART_SetConfig+0x304>)
 800328e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003290:	2203      	movs	r2, #3
 8003292:	4013      	ands	r3, r2
 8003294:	2b03      	cmp	r3, #3
 8003296:	d01d      	beq.n	80032d4 <UART_SetConfig+0xf8>
 8003298:	d823      	bhi.n	80032e2 <UART_SetConfig+0x106>
 800329a:	2b02      	cmp	r3, #2
 800329c:	d00c      	beq.n	80032b8 <UART_SetConfig+0xdc>
 800329e:	d820      	bhi.n	80032e2 <UART_SetConfig+0x106>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <UART_SetConfig+0xce>
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d00e      	beq.n	80032c6 <UART_SetConfig+0xea>
 80032a8:	e01b      	b.n	80032e2 <UART_SetConfig+0x106>
 80032aa:	231b      	movs	r3, #27
 80032ac:	2220      	movs	r2, #32
 80032ae:	189b      	adds	r3, r3, r2
 80032b0:	19db      	adds	r3, r3, r7
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e0b4      	b.n	8003422 <UART_SetConfig+0x246>
 80032b8:	231b      	movs	r3, #27
 80032ba:	2220      	movs	r2, #32
 80032bc:	189b      	adds	r3, r3, r2
 80032be:	19db      	adds	r3, r3, r7
 80032c0:	2202      	movs	r2, #2
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e0ad      	b.n	8003422 <UART_SetConfig+0x246>
 80032c6:	231b      	movs	r3, #27
 80032c8:	2220      	movs	r2, #32
 80032ca:	189b      	adds	r3, r3, r2
 80032cc:	19db      	adds	r3, r3, r7
 80032ce:	2204      	movs	r2, #4
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e0a6      	b.n	8003422 <UART_SetConfig+0x246>
 80032d4:	231b      	movs	r3, #27
 80032d6:	2220      	movs	r2, #32
 80032d8:	189b      	adds	r3, r3, r2
 80032da:	19db      	adds	r3, r3, r7
 80032dc:	2208      	movs	r2, #8
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	e09f      	b.n	8003422 <UART_SetConfig+0x246>
 80032e2:	231b      	movs	r3, #27
 80032e4:	2220      	movs	r2, #32
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	19db      	adds	r3, r3, r7
 80032ea:	2210      	movs	r2, #16
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	e098      	b.n	8003422 <UART_SetConfig+0x246>
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a7b      	ldr	r2, [pc, #492]	@ (80034e4 <UART_SetConfig+0x308>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d131      	bne.n	800335e <UART_SetConfig+0x182>
 80032fa:	4b79      	ldr	r3, [pc, #484]	@ (80034e0 <UART_SetConfig+0x304>)
 80032fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fe:	220c      	movs	r2, #12
 8003300:	4013      	ands	r3, r2
 8003302:	2b0c      	cmp	r3, #12
 8003304:	d01d      	beq.n	8003342 <UART_SetConfig+0x166>
 8003306:	d823      	bhi.n	8003350 <UART_SetConfig+0x174>
 8003308:	2b08      	cmp	r3, #8
 800330a:	d00c      	beq.n	8003326 <UART_SetConfig+0x14a>
 800330c:	d820      	bhi.n	8003350 <UART_SetConfig+0x174>
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <UART_SetConfig+0x13c>
 8003312:	2b04      	cmp	r3, #4
 8003314:	d00e      	beq.n	8003334 <UART_SetConfig+0x158>
 8003316:	e01b      	b.n	8003350 <UART_SetConfig+0x174>
 8003318:	231b      	movs	r3, #27
 800331a:	2220      	movs	r2, #32
 800331c:	189b      	adds	r3, r3, r2
 800331e:	19db      	adds	r3, r3, r7
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e07d      	b.n	8003422 <UART_SetConfig+0x246>
 8003326:	231b      	movs	r3, #27
 8003328:	2220      	movs	r2, #32
 800332a:	189b      	adds	r3, r3, r2
 800332c:	19db      	adds	r3, r3, r7
 800332e:	2202      	movs	r2, #2
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	e076      	b.n	8003422 <UART_SetConfig+0x246>
 8003334:	231b      	movs	r3, #27
 8003336:	2220      	movs	r2, #32
 8003338:	189b      	adds	r3, r3, r2
 800333a:	19db      	adds	r3, r3, r7
 800333c:	2204      	movs	r2, #4
 800333e:	701a      	strb	r2, [r3, #0]
 8003340:	e06f      	b.n	8003422 <UART_SetConfig+0x246>
 8003342:	231b      	movs	r3, #27
 8003344:	2220      	movs	r2, #32
 8003346:	189b      	adds	r3, r3, r2
 8003348:	19db      	adds	r3, r3, r7
 800334a:	2208      	movs	r2, #8
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	e068      	b.n	8003422 <UART_SetConfig+0x246>
 8003350:	231b      	movs	r3, #27
 8003352:	2220      	movs	r2, #32
 8003354:	189b      	adds	r3, r3, r2
 8003356:	19db      	adds	r3, r3, r7
 8003358:	2210      	movs	r2, #16
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	e061      	b.n	8003422 <UART_SetConfig+0x246>
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a61      	ldr	r2, [pc, #388]	@ (80034e8 <UART_SetConfig+0x30c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d106      	bne.n	8003376 <UART_SetConfig+0x19a>
 8003368:	231b      	movs	r3, #27
 800336a:	2220      	movs	r2, #32
 800336c:	189b      	adds	r3, r3, r2
 800336e:	19db      	adds	r3, r3, r7
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	e055      	b.n	8003422 <UART_SetConfig+0x246>
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a5c      	ldr	r2, [pc, #368]	@ (80034ec <UART_SetConfig+0x310>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d106      	bne.n	800338e <UART_SetConfig+0x1b2>
 8003380:	231b      	movs	r3, #27
 8003382:	2220      	movs	r2, #32
 8003384:	189b      	adds	r3, r3, r2
 8003386:	19db      	adds	r3, r3, r7
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	e049      	b.n	8003422 <UART_SetConfig+0x246>
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a50      	ldr	r2, [pc, #320]	@ (80034d4 <UART_SetConfig+0x2f8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d13e      	bne.n	8003416 <UART_SetConfig+0x23a>
 8003398:	4b51      	ldr	r3, [pc, #324]	@ (80034e0 <UART_SetConfig+0x304>)
 800339a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800339c:	23c0      	movs	r3, #192	@ 0xc0
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	4013      	ands	r3, r2
 80033a2:	22c0      	movs	r2, #192	@ 0xc0
 80033a4:	0112      	lsls	r2, r2, #4
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d027      	beq.n	80033fa <UART_SetConfig+0x21e>
 80033aa:	22c0      	movs	r2, #192	@ 0xc0
 80033ac:	0112      	lsls	r2, r2, #4
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d82a      	bhi.n	8003408 <UART_SetConfig+0x22c>
 80033b2:	2280      	movs	r2, #128	@ 0x80
 80033b4:	0112      	lsls	r2, r2, #4
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d011      	beq.n	80033de <UART_SetConfig+0x202>
 80033ba:	2280      	movs	r2, #128	@ 0x80
 80033bc:	0112      	lsls	r2, r2, #4
 80033be:	4293      	cmp	r3, r2
 80033c0:	d822      	bhi.n	8003408 <UART_SetConfig+0x22c>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d004      	beq.n	80033d0 <UART_SetConfig+0x1f4>
 80033c6:	2280      	movs	r2, #128	@ 0x80
 80033c8:	00d2      	lsls	r2, r2, #3
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00e      	beq.n	80033ec <UART_SetConfig+0x210>
 80033ce:	e01b      	b.n	8003408 <UART_SetConfig+0x22c>
 80033d0:	231b      	movs	r3, #27
 80033d2:	2220      	movs	r2, #32
 80033d4:	189b      	adds	r3, r3, r2
 80033d6:	19db      	adds	r3, r3, r7
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	e021      	b.n	8003422 <UART_SetConfig+0x246>
 80033de:	231b      	movs	r3, #27
 80033e0:	2220      	movs	r2, #32
 80033e2:	189b      	adds	r3, r3, r2
 80033e4:	19db      	adds	r3, r3, r7
 80033e6:	2202      	movs	r2, #2
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	e01a      	b.n	8003422 <UART_SetConfig+0x246>
 80033ec:	231b      	movs	r3, #27
 80033ee:	2220      	movs	r2, #32
 80033f0:	189b      	adds	r3, r3, r2
 80033f2:	19db      	adds	r3, r3, r7
 80033f4:	2204      	movs	r2, #4
 80033f6:	701a      	strb	r2, [r3, #0]
 80033f8:	e013      	b.n	8003422 <UART_SetConfig+0x246>
 80033fa:	231b      	movs	r3, #27
 80033fc:	2220      	movs	r2, #32
 80033fe:	189b      	adds	r3, r3, r2
 8003400:	19db      	adds	r3, r3, r7
 8003402:	2208      	movs	r2, #8
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	e00c      	b.n	8003422 <UART_SetConfig+0x246>
 8003408:	231b      	movs	r3, #27
 800340a:	2220      	movs	r2, #32
 800340c:	189b      	adds	r3, r3, r2
 800340e:	19db      	adds	r3, r3, r7
 8003410:	2210      	movs	r2, #16
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e005      	b.n	8003422 <UART_SetConfig+0x246>
 8003416:	231b      	movs	r3, #27
 8003418:	2220      	movs	r2, #32
 800341a:	189b      	adds	r3, r3, r2
 800341c:	19db      	adds	r3, r3, r7
 800341e:	2210      	movs	r2, #16
 8003420:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a2b      	ldr	r2, [pc, #172]	@ (80034d4 <UART_SetConfig+0x2f8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d000      	beq.n	800342e <UART_SetConfig+0x252>
 800342c:	e0a9      	b.n	8003582 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800342e:	231b      	movs	r3, #27
 8003430:	2220      	movs	r2, #32
 8003432:	189b      	adds	r3, r3, r2
 8003434:	19db      	adds	r3, r3, r7
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b08      	cmp	r3, #8
 800343a:	d015      	beq.n	8003468 <UART_SetConfig+0x28c>
 800343c:	dc18      	bgt.n	8003470 <UART_SetConfig+0x294>
 800343e:	2b04      	cmp	r3, #4
 8003440:	d00d      	beq.n	800345e <UART_SetConfig+0x282>
 8003442:	dc15      	bgt.n	8003470 <UART_SetConfig+0x294>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <UART_SetConfig+0x272>
 8003448:	2b02      	cmp	r3, #2
 800344a:	d005      	beq.n	8003458 <UART_SetConfig+0x27c>
 800344c:	e010      	b.n	8003470 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800344e:	f7fe fe83 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 8003452:	0003      	movs	r3, r0
 8003454:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003456:	e014      	b.n	8003482 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003458:	4b25      	ldr	r3, [pc, #148]	@ (80034f0 <UART_SetConfig+0x314>)
 800345a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800345c:	e011      	b.n	8003482 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800345e:	f7fe fdef 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8003462:	0003      	movs	r3, r0
 8003464:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003466:	e00c      	b.n	8003482 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003468:	2380      	movs	r3, #128	@ 0x80
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800346e:	e008      	b.n	8003482 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003474:	231a      	movs	r3, #26
 8003476:	2220      	movs	r2, #32
 8003478:	189b      	adds	r3, r3, r2
 800347a:	19db      	adds	r3, r3, r7
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
        break;
 8003480:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003484:	2b00      	cmp	r3, #0
 8003486:	d100      	bne.n	800348a <UART_SetConfig+0x2ae>
 8003488:	e14b      	b.n	8003722 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800348e:	4b19      	ldr	r3, [pc, #100]	@ (80034f4 <UART_SetConfig+0x318>)
 8003490:	0052      	lsls	r2, r2, #1
 8003492:	5ad3      	ldrh	r3, [r2, r3]
 8003494:	0019      	movs	r1, r3
 8003496:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003498:	f7fc fe34 	bl	8000104 <__udivsi3>
 800349c:	0003      	movs	r3, r0
 800349e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	0013      	movs	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	189b      	adds	r3, r3, r2
 80034aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d305      	bcc.n	80034bc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80034b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d91d      	bls.n	80034f8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80034bc:	231a      	movs	r3, #26
 80034be:	2220      	movs	r2, #32
 80034c0:	189b      	adds	r3, r3, r2
 80034c2:	19db      	adds	r3, r3, r7
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
 80034c8:	e12b      	b.n	8003722 <UART_SetConfig+0x546>
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	cfff69f3 	.word	0xcfff69f3
 80034d0:	ffffcfff 	.word	0xffffcfff
 80034d4:	40008000 	.word	0x40008000
 80034d8:	11fff4ff 	.word	0x11fff4ff
 80034dc:	40013800 	.word	0x40013800
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40004400 	.word	0x40004400
 80034e8:	40004800 	.word	0x40004800
 80034ec:	40004c00 	.word	0x40004c00
 80034f0:	00f42400 	.word	0x00f42400
 80034f4:	08005180 	.word	0x08005180
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]
 8003500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003502:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003504:	4b92      	ldr	r3, [pc, #584]	@ (8003750 <UART_SetConfig+0x574>)
 8003506:	0052      	lsls	r2, r2, #1
 8003508:	5ad3      	ldrh	r3, [r2, r3]
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	69b8      	ldr	r0, [r7, #24]
 8003516:	69f9      	ldr	r1, [r7, #28]
 8003518:	f7fc ff6a 	bl	80003f0 <__aeabi_uldivmod>
 800351c:	0002      	movs	r2, r0
 800351e:	000b      	movs	r3, r1
 8003520:	0e11      	lsrs	r1, r2, #24
 8003522:	021d      	lsls	r5, r3, #8
 8003524:	430d      	orrs	r5, r1
 8003526:	0214      	lsls	r4, r2, #8
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68b8      	ldr	r0, [r7, #8]
 8003536:	68f9      	ldr	r1, [r7, #12]
 8003538:	1900      	adds	r0, r0, r4
 800353a:	4169      	adcs	r1, r5
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	2300      	movs	r3, #0
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f7fc ff51 	bl	80003f0 <__aeabi_uldivmod>
 800354e:	0002      	movs	r2, r0
 8003550:	000b      	movs	r3, r1
 8003552:	0013      	movs	r3, r2
 8003554:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003558:	23c0      	movs	r3, #192	@ 0xc0
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	429a      	cmp	r2, r3
 800355e:	d309      	bcc.n	8003574 <UART_SetConfig+0x398>
 8003560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003562:	2380      	movs	r3, #128	@ 0x80
 8003564:	035b      	lsls	r3, r3, #13
 8003566:	429a      	cmp	r2, r3
 8003568:	d204      	bcs.n	8003574 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	e0d6      	b.n	8003722 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003574:	231a      	movs	r3, #26
 8003576:	2220      	movs	r2, #32
 8003578:	189b      	adds	r3, r3, r2
 800357a:	19db      	adds	r3, r3, r7
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	e0cf      	b.n	8003722 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	2380      	movs	r3, #128	@ 0x80
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	429a      	cmp	r2, r3
 800358c:	d000      	beq.n	8003590 <UART_SetConfig+0x3b4>
 800358e:	e070      	b.n	8003672 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003590:	231b      	movs	r3, #27
 8003592:	2220      	movs	r2, #32
 8003594:	189b      	adds	r3, r3, r2
 8003596:	19db      	adds	r3, r3, r7
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b08      	cmp	r3, #8
 800359c:	d015      	beq.n	80035ca <UART_SetConfig+0x3ee>
 800359e:	dc18      	bgt.n	80035d2 <UART_SetConfig+0x3f6>
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d00d      	beq.n	80035c0 <UART_SetConfig+0x3e4>
 80035a4:	dc15      	bgt.n	80035d2 <UART_SetConfig+0x3f6>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <UART_SetConfig+0x3d4>
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d005      	beq.n	80035ba <UART_SetConfig+0x3de>
 80035ae:	e010      	b.n	80035d2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b0:	f7fe fdd2 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 80035b4:	0003      	movs	r3, r0
 80035b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035b8:	e014      	b.n	80035e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035ba:	4b66      	ldr	r3, [pc, #408]	@ (8003754 <UART_SetConfig+0x578>)
 80035bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035be:	e011      	b.n	80035e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c0:	f7fe fd3e 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 80035c4:	0003      	movs	r3, r0
 80035c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035c8:	e00c      	b.n	80035e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ca:	2380      	movs	r3, #128	@ 0x80
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035d0:	e008      	b.n	80035e4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80035d6:	231a      	movs	r3, #26
 80035d8:	2220      	movs	r2, #32
 80035da:	189b      	adds	r3, r3, r2
 80035dc:	19db      	adds	r3, r3, r7
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
        break;
 80035e2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d100      	bne.n	80035ec <UART_SetConfig+0x410>
 80035ea:	e09a      	b.n	8003722 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035f0:	4b57      	ldr	r3, [pc, #348]	@ (8003750 <UART_SetConfig+0x574>)
 80035f2:	0052      	lsls	r2, r2, #1
 80035f4:	5ad3      	ldrh	r3, [r2, r3]
 80035f6:	0019      	movs	r1, r3
 80035f8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80035fa:	f7fc fd83 	bl	8000104 <__udivsi3>
 80035fe:	0003      	movs	r3, r0
 8003600:	005a      	lsls	r2, r3, #1
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	18d2      	adds	r2, r2, r3
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	0019      	movs	r1, r3
 8003610:	0010      	movs	r0, r2
 8003612:	f7fc fd77 	bl	8000104 <__udivsi3>
 8003616:	0003      	movs	r3, r0
 8003618:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800361a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361c:	2b0f      	cmp	r3, #15
 800361e:	d921      	bls.n	8003664 <UART_SetConfig+0x488>
 8003620:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003622:	2380      	movs	r3, #128	@ 0x80
 8003624:	025b      	lsls	r3, r3, #9
 8003626:	429a      	cmp	r2, r3
 8003628:	d21c      	bcs.n	8003664 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800362a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362c:	b29a      	uxth	r2, r3
 800362e:	200e      	movs	r0, #14
 8003630:	2420      	movs	r4, #32
 8003632:	1903      	adds	r3, r0, r4
 8003634:	19db      	adds	r3, r3, r7
 8003636:	210f      	movs	r1, #15
 8003638:	438a      	bics	r2, r1
 800363a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800363c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	b29b      	uxth	r3, r3
 8003642:	2207      	movs	r2, #7
 8003644:	4013      	ands	r3, r2
 8003646:	b299      	uxth	r1, r3
 8003648:	1903      	adds	r3, r0, r4
 800364a:	19db      	adds	r3, r3, r7
 800364c:	1902      	adds	r2, r0, r4
 800364e:	19d2      	adds	r2, r2, r7
 8003650:	8812      	ldrh	r2, [r2, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	1902      	adds	r2, r0, r4
 800365c:	19d2      	adds	r2, r2, r7
 800365e:	8812      	ldrh	r2, [r2, #0]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	e05e      	b.n	8003722 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003664:	231a      	movs	r3, #26
 8003666:	2220      	movs	r2, #32
 8003668:	189b      	adds	r3, r3, r2
 800366a:	19db      	adds	r3, r3, r7
 800366c:	2201      	movs	r2, #1
 800366e:	701a      	strb	r2, [r3, #0]
 8003670:	e057      	b.n	8003722 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003672:	231b      	movs	r3, #27
 8003674:	2220      	movs	r2, #32
 8003676:	189b      	adds	r3, r3, r2
 8003678:	19db      	adds	r3, r3, r7
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d015      	beq.n	80036ac <UART_SetConfig+0x4d0>
 8003680:	dc18      	bgt.n	80036b4 <UART_SetConfig+0x4d8>
 8003682:	2b04      	cmp	r3, #4
 8003684:	d00d      	beq.n	80036a2 <UART_SetConfig+0x4c6>
 8003686:	dc15      	bgt.n	80036b4 <UART_SetConfig+0x4d8>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <UART_SetConfig+0x4b6>
 800368c:	2b02      	cmp	r3, #2
 800368e:	d005      	beq.n	800369c <UART_SetConfig+0x4c0>
 8003690:	e010      	b.n	80036b4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003692:	f7fe fd61 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 8003696:	0003      	movs	r3, r0
 8003698:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800369a:	e014      	b.n	80036c6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800369c:	4b2d      	ldr	r3, [pc, #180]	@ (8003754 <UART_SetConfig+0x578>)
 800369e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80036a0:	e011      	b.n	80036c6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a2:	f7fe fccd 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 80036a6:	0003      	movs	r3, r0
 80036a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80036aa:	e00c      	b.n	80036c6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ac:	2380      	movs	r3, #128	@ 0x80
 80036ae:	021b      	lsls	r3, r3, #8
 80036b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80036b2:	e008      	b.n	80036c6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80036b8:	231a      	movs	r3, #26
 80036ba:	2220      	movs	r2, #32
 80036bc:	189b      	adds	r3, r3, r2
 80036be:	19db      	adds	r3, r3, r7
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
        break;
 80036c4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80036c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d02a      	beq.n	8003722 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003750 <UART_SetConfig+0x574>)
 80036d2:	0052      	lsls	r2, r2, #1
 80036d4:	5ad3      	ldrh	r3, [r2, r3]
 80036d6:	0019      	movs	r1, r3
 80036d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80036da:	f7fc fd13 	bl	8000104 <__udivsi3>
 80036de:	0003      	movs	r3, r0
 80036e0:	001a      	movs	r2, r3
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	18d2      	adds	r2, r2, r3
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	0019      	movs	r1, r3
 80036f0:	0010      	movs	r0, r2
 80036f2:	f7fc fd07 	bl	8000104 <__udivsi3>
 80036f6:	0003      	movs	r3, r0
 80036f8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fc:	2b0f      	cmp	r3, #15
 80036fe:	d90a      	bls.n	8003716 <UART_SetConfig+0x53a>
 8003700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003702:	2380      	movs	r3, #128	@ 0x80
 8003704:	025b      	lsls	r3, r3, #9
 8003706:	429a      	cmp	r2, r3
 8003708:	d205      	bcs.n	8003716 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370c:	b29a      	uxth	r2, r3
 800370e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	e005      	b.n	8003722 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003716:	231a      	movs	r3, #26
 8003718:	2220      	movs	r2, #32
 800371a:	189b      	adds	r3, r3, r2
 800371c:	19db      	adds	r3, r3, r7
 800371e:	2201      	movs	r2, #1
 8003720:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003724:	226a      	movs	r2, #106	@ 0x6a
 8003726:	2101      	movs	r1, #1
 8003728:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	2268      	movs	r2, #104	@ 0x68
 800372e:	2101      	movs	r1, #1
 8003730:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	2200      	movs	r2, #0
 8003736:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	2200      	movs	r2, #0
 800373c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800373e:	231a      	movs	r3, #26
 8003740:	2220      	movs	r2, #32
 8003742:	189b      	adds	r3, r3, r2
 8003744:	19db      	adds	r3, r3, r7
 8003746:	781b      	ldrb	r3, [r3, #0]
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	b010      	add	sp, #64	@ 0x40
 800374e:	bdb0      	pop	{r4, r5, r7, pc}
 8003750:	08005180 	.word	0x08005180
 8003754:	00f42400 	.word	0x00f42400

08003758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003764:	2208      	movs	r2, #8
 8003766:	4013      	ands	r3, r2
 8003768:	d00b      	beq.n	8003782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4a4a      	ldr	r2, [pc, #296]	@ (800389c <UART_AdvFeatureConfig+0x144>)
 8003772:	4013      	ands	r3, r2
 8003774:	0019      	movs	r1, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003786:	2201      	movs	r2, #1
 8003788:	4013      	ands	r3, r2
 800378a:	d00b      	beq.n	80037a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	4a43      	ldr	r2, [pc, #268]	@ (80038a0 <UART_AdvFeatureConfig+0x148>)
 8003794:	4013      	ands	r3, r2
 8003796:	0019      	movs	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a8:	2202      	movs	r2, #2
 80037aa:	4013      	ands	r3, r2
 80037ac:	d00b      	beq.n	80037c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	4a3b      	ldr	r2, [pc, #236]	@ (80038a4 <UART_AdvFeatureConfig+0x14c>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	0019      	movs	r1, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ca:	2204      	movs	r2, #4
 80037cc:	4013      	ands	r3, r2
 80037ce:	d00b      	beq.n	80037e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4a34      	ldr	r2, [pc, #208]	@ (80038a8 <UART_AdvFeatureConfig+0x150>)
 80037d8:	4013      	ands	r3, r2
 80037da:	0019      	movs	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ec:	2210      	movs	r2, #16
 80037ee:	4013      	ands	r3, r2
 80037f0:	d00b      	beq.n	800380a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	4a2c      	ldr	r2, [pc, #176]	@ (80038ac <UART_AdvFeatureConfig+0x154>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	0019      	movs	r1, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380e:	2220      	movs	r2, #32
 8003810:	4013      	ands	r3, r2
 8003812:	d00b      	beq.n	800382c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	4a25      	ldr	r2, [pc, #148]	@ (80038b0 <UART_AdvFeatureConfig+0x158>)
 800381c:	4013      	ands	r3, r2
 800381e:	0019      	movs	r1, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003830:	2240      	movs	r2, #64	@ 0x40
 8003832:	4013      	ands	r3, r2
 8003834:	d01d      	beq.n	8003872 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a1d      	ldr	r2, [pc, #116]	@ (80038b4 <UART_AdvFeatureConfig+0x15c>)
 800383e:	4013      	ands	r3, r2
 8003840:	0019      	movs	r1, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003852:	2380      	movs	r3, #128	@ 0x80
 8003854:	035b      	lsls	r3, r3, #13
 8003856:	429a      	cmp	r2, r3
 8003858:	d10b      	bne.n	8003872 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4a15      	ldr	r2, [pc, #84]	@ (80038b8 <UART_AdvFeatureConfig+0x160>)
 8003862:	4013      	ands	r3, r2
 8003864:	0019      	movs	r1, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003876:	2280      	movs	r2, #128	@ 0x80
 8003878:	4013      	ands	r3, r2
 800387a:	d00b      	beq.n	8003894 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4a0e      	ldr	r2, [pc, #56]	@ (80038bc <UART_AdvFeatureConfig+0x164>)
 8003884:	4013      	ands	r3, r2
 8003886:	0019      	movs	r1, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	605a      	str	r2, [r3, #4]
  }
}
 8003894:	46c0      	nop			@ (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b002      	add	sp, #8
 800389a:	bd80      	pop	{r7, pc}
 800389c:	ffff7fff 	.word	0xffff7fff
 80038a0:	fffdffff 	.word	0xfffdffff
 80038a4:	fffeffff 	.word	0xfffeffff
 80038a8:	fffbffff 	.word	0xfffbffff
 80038ac:	ffffefff 	.word	0xffffefff
 80038b0:	ffffdfff 	.word	0xffffdfff
 80038b4:	ffefffff 	.word	0xffefffff
 80038b8:	ff9fffff 	.word	0xff9fffff
 80038bc:	fff7ffff 	.word	0xfff7ffff

080038c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b092      	sub	sp, #72	@ 0x48
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2290      	movs	r2, #144	@ 0x90
 80038cc:	2100      	movs	r1, #0
 80038ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038d0:	f7fd f9ba 	bl	8000c48 <HAL_GetTick>
 80038d4:	0003      	movs	r3, r0
 80038d6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2208      	movs	r2, #8
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d12d      	bne.n	8003942 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038e8:	2280      	movs	r2, #128	@ 0x80
 80038ea:	0391      	lsls	r1, r2, #14
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4a47      	ldr	r2, [pc, #284]	@ (8003a0c <UART_CheckIdleState+0x14c>)
 80038f0:	9200      	str	r2, [sp, #0]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f000 f88e 	bl	8003a14 <UART_WaitOnFlagUntilTimeout>
 80038f8:	1e03      	subs	r3, r0, #0
 80038fa:	d022      	beq.n	8003942 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003900:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003904:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003906:	2301      	movs	r3, #1
 8003908:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390c:	f383 8810 	msr	PRIMASK, r3
}
 8003910:	46c0      	nop			@ (mov r8, r8)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2180      	movs	r1, #128	@ 0x80
 800391e:	438a      	bics	r2, r1
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003928:	f383 8810 	msr	PRIMASK, r3
}
 800392c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2288      	movs	r2, #136	@ 0x88
 8003932:	2120      	movs	r1, #32
 8003934:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2284      	movs	r2, #132	@ 0x84
 800393a:	2100      	movs	r1, #0
 800393c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e060      	b.n	8003a04 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2204      	movs	r2, #4
 800394a:	4013      	ands	r3, r2
 800394c:	2b04      	cmp	r3, #4
 800394e:	d146      	bne.n	80039de <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003952:	2280      	movs	r2, #128	@ 0x80
 8003954:	03d1      	lsls	r1, r2, #15
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	4a2c      	ldr	r2, [pc, #176]	@ (8003a0c <UART_CheckIdleState+0x14c>)
 800395a:	9200      	str	r2, [sp, #0]
 800395c:	2200      	movs	r2, #0
 800395e:	f000 f859 	bl	8003a14 <UART_WaitOnFlagUntilTimeout>
 8003962:	1e03      	subs	r3, r0, #0
 8003964:	d03b      	beq.n	80039de <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003966:	f3ef 8310 	mrs	r3, PRIMASK
 800396a:	60fb      	str	r3, [r7, #12]
  return(result);
 800396c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800396e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003970:	2301      	movs	r3, #1
 8003972:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f383 8810 	msr	PRIMASK, r3
}
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4922      	ldr	r1, [pc, #136]	@ (8003a10 <UART_CheckIdleState+0x150>)
 8003988:	400a      	ands	r2, r1
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f383 8810 	msr	PRIMASK, r3
}
 8003996:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003998:	f3ef 8310 	mrs	r3, PRIMASK
 800399c:	61bb      	str	r3, [r7, #24]
  return(result);
 800399e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80039a2:	2301      	movs	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f383 8810 	msr	PRIMASK, r3
}
 80039ac:	46c0      	nop			@ (mov r8, r8)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2101      	movs	r1, #1
 80039ba:	438a      	bics	r2, r1
 80039bc:	609a      	str	r2, [r3, #8]
 80039be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	f383 8810 	msr	PRIMASK, r3
}
 80039c8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	228c      	movs	r2, #140	@ 0x8c
 80039ce:	2120      	movs	r1, #32
 80039d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2284      	movs	r2, #132	@ 0x84
 80039d6:	2100      	movs	r1, #0
 80039d8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e012      	b.n	8003a04 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2288      	movs	r2, #136	@ 0x88
 80039e2:	2120      	movs	r1, #32
 80039e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	228c      	movs	r2, #140	@ 0x8c
 80039ea:	2120      	movs	r1, #32
 80039ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2284      	movs	r2, #132	@ 0x84
 80039fe:	2100      	movs	r1, #0
 8003a00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	0018      	movs	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b010      	add	sp, #64	@ 0x40
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	01ffffff 	.word	0x01ffffff
 8003a10:	fffffedf 	.word	0xfffffedf

08003a14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	1dfb      	adds	r3, r7, #7
 8003a22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a24:	e051      	b.n	8003aca <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	d04e      	beq.n	8003aca <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2c:	f7fd f90c 	bl	8000c48 <HAL_GetTick>
 8003a30:	0002      	movs	r2, r0
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d302      	bcc.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e051      	b.n	8003aea <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d03b      	beq.n	8003aca <UART_WaitOnFlagUntilTimeout+0xb6>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b80      	cmp	r3, #128	@ 0x80
 8003a56:	d038      	beq.n	8003aca <UART_WaitOnFlagUntilTimeout+0xb6>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b40      	cmp	r3, #64	@ 0x40
 8003a5c:	d035      	beq.n	8003aca <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	2208      	movs	r2, #8
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d111      	bne.n	8003a90 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2208      	movs	r2, #8
 8003a72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 fa46 	bl	8003f08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2290      	movs	r2, #144	@ 0x90
 8003a80:	2108      	movs	r1, #8
 8003a82:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2284      	movs	r2, #132	@ 0x84
 8003a88:	2100      	movs	r1, #0
 8003a8a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e02c      	b.n	8003aea <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69da      	ldr	r2, [r3, #28]
 8003a96:	2380      	movs	r3, #128	@ 0x80
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d112      	bne.n	8003aca <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2280      	movs	r2, #128	@ 0x80
 8003aaa:	0112      	lsls	r2, r2, #4
 8003aac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f000 fa29 	bl	8003f08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2290      	movs	r2, #144	@ 0x90
 8003aba:	2120      	movs	r1, #32
 8003abc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2284      	movs	r2, #132	@ 0x84
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e00f      	b.n	8003aea <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	425a      	negs	r2, r3
 8003ada:	4153      	adcs	r3, r2
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	001a      	movs	r2, r3
 8003ae0:	1dfb      	adds	r3, r7, #7
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d09e      	beq.n	8003a26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	0018      	movs	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b004      	add	sp, #16
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b098      	sub	sp, #96	@ 0x60
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	1dbb      	adds	r3, r7, #6
 8003b00:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1dba      	adds	r2, r7, #6
 8003b0c:	215c      	movs	r1, #92	@ 0x5c
 8003b0e:	8812      	ldrh	r2, [r2, #0]
 8003b10:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1dba      	adds	r2, r7, #6
 8003b16:	215e      	movs	r1, #94	@ 0x5e
 8003b18:	8812      	ldrh	r2, [r2, #0]
 8003b1a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	2380      	movs	r3, #128	@ 0x80
 8003b28:	015b      	lsls	r3, r3, #5
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d10d      	bne.n	8003b4a <UART_Start_Receive_IT+0x56>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d104      	bne.n	8003b40 <UART_Start_Receive_IT+0x4c>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2260      	movs	r2, #96	@ 0x60
 8003b3a:	497b      	ldr	r1, [pc, #492]	@ (8003d28 <UART_Start_Receive_IT+0x234>)
 8003b3c:	5299      	strh	r1, [r3, r2]
 8003b3e:	e02e      	b.n	8003b9e <UART_Start_Receive_IT+0xaa>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2260      	movs	r2, #96	@ 0x60
 8003b44:	21ff      	movs	r1, #255	@ 0xff
 8003b46:	5299      	strh	r1, [r3, r2]
 8003b48:	e029      	b.n	8003b9e <UART_Start_Receive_IT+0xaa>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10d      	bne.n	8003b6e <UART_Start_Receive_IT+0x7a>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d104      	bne.n	8003b64 <UART_Start_Receive_IT+0x70>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2260      	movs	r2, #96	@ 0x60
 8003b5e:	21ff      	movs	r1, #255	@ 0xff
 8003b60:	5299      	strh	r1, [r3, r2]
 8003b62:	e01c      	b.n	8003b9e <UART_Start_Receive_IT+0xaa>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2260      	movs	r2, #96	@ 0x60
 8003b68:	217f      	movs	r1, #127	@ 0x7f
 8003b6a:	5299      	strh	r1, [r3, r2]
 8003b6c:	e017      	b.n	8003b9e <UART_Start_Receive_IT+0xaa>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	2380      	movs	r3, #128	@ 0x80
 8003b74:	055b      	lsls	r3, r3, #21
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d10d      	bne.n	8003b96 <UART_Start_Receive_IT+0xa2>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d104      	bne.n	8003b8c <UART_Start_Receive_IT+0x98>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2260      	movs	r2, #96	@ 0x60
 8003b86:	217f      	movs	r1, #127	@ 0x7f
 8003b88:	5299      	strh	r1, [r3, r2]
 8003b8a:	e008      	b.n	8003b9e <UART_Start_Receive_IT+0xaa>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2260      	movs	r2, #96	@ 0x60
 8003b90:	213f      	movs	r1, #63	@ 0x3f
 8003b92:	5299      	strh	r1, [r3, r2]
 8003b94:	e003      	b.n	8003b9e <UART_Start_Receive_IT+0xaa>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2260      	movs	r2, #96	@ 0x60
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2290      	movs	r2, #144	@ 0x90
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	228c      	movs	r2, #140	@ 0x8c
 8003baa:	2122      	movs	r1, #34	@ 0x22
 8003bac:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bae:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb2:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8003bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bb8:	2301      	movs	r3, #1
 8003bba:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bbe:	f383 8810 	msr	PRIMASK, r3
}
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2101      	movs	r1, #1
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bda:	f383 8810 	msr	PRIMASK, r3
}
 8003bde:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003be4:	2380      	movs	r3, #128	@ 0x80
 8003be6:	059b      	lsls	r3, r3, #22
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d150      	bne.n	8003c8e <UART_Start_Receive_IT+0x19a>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2268      	movs	r2, #104	@ 0x68
 8003bf0:	5a9b      	ldrh	r3, [r3, r2]
 8003bf2:	1dba      	adds	r2, r7, #6
 8003bf4:	8812      	ldrh	r2, [r2, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d349      	bcc.n	8003c8e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	2380      	movs	r3, #128	@ 0x80
 8003c00:	015b      	lsls	r3, r3, #5
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d107      	bne.n	8003c16 <UART_Start_Receive_IT+0x122>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a46      	ldr	r2, [pc, #280]	@ (8003d2c <UART_Start_Receive_IT+0x238>)
 8003c12:	675a      	str	r2, [r3, #116]	@ 0x74
 8003c14:	e002      	b.n	8003c1c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4a45      	ldr	r2, [pc, #276]	@ (8003d30 <UART_Start_Receive_IT+0x23c>)
 8003c1a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d019      	beq.n	8003c58 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c24:	f3ef 8310 	mrs	r3, PRIMASK
 8003c28:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8003c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c2e:	2301      	movs	r3, #1
 8003c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c34:	f383 8810 	msr	PRIMASK, r3
}
 8003c38:	46c0      	nop			@ (mov r8, r8)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2180      	movs	r1, #128	@ 0x80
 8003c46:	0049      	lsls	r1, r1, #1
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c52:	f383 8810 	msr	PRIMASK, r3
}
 8003c56:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c58:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003c60:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c62:	2301      	movs	r3, #1
 8003c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c68:	f383 8810 	msr	PRIMASK, r3
}
 8003c6c:	46c0      	nop			@ (mov r8, r8)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2180      	movs	r1, #128	@ 0x80
 8003c7a:	0549      	lsls	r1, r1, #21
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	609a      	str	r2, [r3, #8]
 8003c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c82:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c86:	f383 8810 	msr	PRIMASK, r3
}
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	e047      	b.n	8003d1e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	2380      	movs	r3, #128	@ 0x80
 8003c94:	015b      	lsls	r3, r3, #5
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d107      	bne.n	8003caa <UART_Start_Receive_IT+0x1b6>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4a23      	ldr	r2, [pc, #140]	@ (8003d34 <UART_Start_Receive_IT+0x240>)
 8003ca6:	675a      	str	r2, [r3, #116]	@ 0x74
 8003ca8:	e002      	b.n	8003cb0 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4a22      	ldr	r2, [pc, #136]	@ (8003d38 <UART_Start_Receive_IT+0x244>)
 8003cae:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d019      	beq.n	8003cec <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cbc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cbe:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	f383 8810 	msr	PRIMASK, r3
}
 8003ccc:	46c0      	nop			@ (mov r8, r8)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2190      	movs	r1, #144	@ 0x90
 8003cda:	0049      	lsls	r1, r1, #1
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce6:	f383 8810 	msr	PRIMASK, r3
}
 8003cea:	e018      	b.n	8003d1e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cec:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf0:	613b      	str	r3, [r7, #16]
  return(result);
 8003cf2:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003cf4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f383 8810 	msr	PRIMASK, r3
}
 8003d00:	46c0      	nop			@ (mov r8, r8)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2120      	movs	r1, #32
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f383 8810 	msr	PRIMASK, r3
}
 8003d1c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b018      	add	sp, #96	@ 0x60
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	000001ff 	.word	0x000001ff
 8003d2c:	08004a09 	.word	0x08004a09
 8003d30:	080046c1 	.word	0x080046c1
 8003d34:	080044f5 	.word	0x080044f5
 8003d38:	08004329 	.word	0x08004329

08003d3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b090      	sub	sp, #64	@ 0x40
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	1dbb      	adds	r3, r7, #6
 8003d48:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1dba      	adds	r2, r7, #6
 8003d54:	215c      	movs	r1, #92	@ 0x5c
 8003d56:	8812      	ldrh	r2, [r2, #0]
 8003d58:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2290      	movs	r2, #144	@ 0x90
 8003d5e:	2100      	movs	r1, #0
 8003d60:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	228c      	movs	r2, #140	@ 0x8c
 8003d66:	2122      	movs	r1, #34	@ 0x22
 8003d68:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2280      	movs	r2, #128	@ 0x80
 8003d6e:	589b      	ldr	r3, [r3, r2]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d02d      	beq.n	8003dd0 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2280      	movs	r2, #128	@ 0x80
 8003d78:	589b      	ldr	r3, [r3, r2]
 8003d7a:	4a40      	ldr	r2, [pc, #256]	@ (8003e7c <UART_Start_Receive_DMA+0x140>)
 8003d7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2280      	movs	r2, #128	@ 0x80
 8003d82:	589b      	ldr	r3, [r3, r2]
 8003d84:	4a3e      	ldr	r2, [pc, #248]	@ (8003e80 <UART_Start_Receive_DMA+0x144>)
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2280      	movs	r2, #128	@ 0x80
 8003d8c:	589b      	ldr	r3, [r3, r2]
 8003d8e:	4a3d      	ldr	r2, [pc, #244]	@ (8003e84 <UART_Start_Receive_DMA+0x148>)
 8003d90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2280      	movs	r2, #128	@ 0x80
 8003d96:	589b      	ldr	r3, [r3, r2]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2280      	movs	r2, #128	@ 0x80
 8003da0:	5898      	ldr	r0, [r3, r2]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3324      	adds	r3, #36	@ 0x24
 8003da8:	0019      	movs	r1, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dae:	001a      	movs	r2, r3
 8003db0:	1dbb      	adds	r3, r7, #6
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	f7fd f8de 	bl	8000f74 <HAL_DMA_Start_IT>
 8003db8:	1e03      	subs	r3, r0, #0
 8003dba:	d009      	beq.n	8003dd0 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2290      	movs	r2, #144	@ 0x90
 8003dc0:	2110      	movs	r1, #16
 8003dc2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	228c      	movs	r2, #140	@ 0x8c
 8003dc8:	2120      	movs	r1, #32
 8003dca:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e050      	b.n	8003e72 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d019      	beq.n	8003e0c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003de2:	2301      	movs	r3, #1
 8003de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de8:	f383 8810 	msr	PRIMASK, r3
}
 8003dec:	46c0      	nop			@ (mov r8, r8)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2180      	movs	r1, #128	@ 0x80
 8003dfa:	0049      	lsls	r1, r1, #1
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e02:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e06:	f383 8810 	msr	PRIMASK, r3
}
 8003e0a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e10:	613b      	str	r3, [r7, #16]
  return(result);
 8003e12:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e16:	2301      	movs	r3, #1
 8003e18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f383 8810 	msr	PRIMASK, r3
}
 8003e20:	46c0      	nop			@ (mov r8, r8)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	609a      	str	r2, [r3, #8]
 8003e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	f383 8810 	msr	PRIMASK, r3
}
 8003e3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e42:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e44:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e48:	2301      	movs	r3, #1
 8003e4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	f383 8810 	msr	PRIMASK, r3
}
 8003e52:	46c0      	nop			@ (mov r8, r8)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2140      	movs	r1, #64	@ 0x40
 8003e60:	430a      	orrs	r2, r1
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e66:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6a:	f383 8810 	msr	PRIMASK, r3
}
 8003e6e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	0018      	movs	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b010      	add	sp, #64	@ 0x40
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	08004095 	.word	0x08004095
 8003e80:	080041c9 	.word	0x080041c9
 8003e84:	08004211 	.word	0x08004211

08003e88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	@ 0x28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e90:	f3ef 8310 	mrs	r3, PRIMASK
 8003e94:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e96:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f383 8810 	msr	PRIMASK, r3
}
 8003ea4:	46c0      	nop			@ (mov r8, r8)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	21c0      	movs	r1, #192	@ 0xc0
 8003eb2:	438a      	bics	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f383 8810 	msr	PRIMASK, r3
}
 8003ec0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec6:	617b      	str	r3, [r7, #20]
  return(result);
 8003ec8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003eca:	623b      	str	r3, [r7, #32]
 8003ecc:	2301      	movs	r3, #1
 8003ece:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	f383 8810 	msr	PRIMASK, r3
}
 8003ed6:	46c0      	nop			@ (mov r8, r8)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4908      	ldr	r1, [pc, #32]	@ (8003f04 <UART_EndTxTransfer+0x7c>)
 8003ee4:	400a      	ands	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f383 8810 	msr	PRIMASK, r3
}
 8003ef2:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2288      	movs	r2, #136	@ 0x88
 8003ef8:	2120      	movs	r1, #32
 8003efa:	5099      	str	r1, [r3, r2]
}
 8003efc:	46c0      	nop			@ (mov r8, r8)
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b00a      	add	sp, #40	@ 0x28
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	ff7fffff 	.word	0xff7fffff

08003f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08e      	sub	sp, #56	@ 0x38
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f10:	f3ef 8310 	mrs	r3, PRIMASK
 8003f14:	617b      	str	r3, [r7, #20]
  return(result);
 8003f16:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	f383 8810 	msr	PRIMASK, r3
}
 8003f24:	46c0      	nop			@ (mov r8, r8)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4926      	ldr	r1, [pc, #152]	@ (8003fcc <UART_EndRxTransfer+0xc4>)
 8003f32:	400a      	ands	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f383 8810 	msr	PRIMASK, r3
}
 8003f40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f42:	f3ef 8310 	mrs	r3, PRIMASK
 8003f46:	623b      	str	r3, [r7, #32]
  return(result);
 8003f48:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	f383 8810 	msr	PRIMASK, r3
}
 8003f56:	46c0      	nop			@ (mov r8, r8)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	491b      	ldr	r1, [pc, #108]	@ (8003fd0 <UART_EndRxTransfer+0xc8>)
 8003f64:	400a      	ands	r2, r1
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6e:	f383 8810 	msr	PRIMASK, r3
}
 8003f72:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d118      	bne.n	8003fae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f80:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f82:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f86:	2301      	movs	r3, #1
 8003f88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f383 8810 	msr	PRIMASK, r3
}
 8003f90:	46c0      	nop			@ (mov r8, r8)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2110      	movs	r1, #16
 8003f9e:	438a      	bics	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f383 8810 	msr	PRIMASK, r3
}
 8003fac:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	228c      	movs	r2, #140	@ 0x8c
 8003fb2:	2120      	movs	r1, #32
 8003fb4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b00e      	add	sp, #56	@ 0x38
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	fffffedf 	.word	0xfffffedf
 8003fd0:	effffffe 	.word	0xeffffffe

08003fd4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08c      	sub	sp, #48	@ 0x30
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	4013      	ands	r3, r2
 8003fec:	d135      	bne.n	800405a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8003fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff0:	2256      	movs	r2, #86	@ 0x56
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8003ffa:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ffc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004000:	2301      	movs	r3, #1
 8004002:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f383 8810 	msr	PRIMASK, r3
}
 800400a:	46c0      	nop			@ (mov r8, r8)
 800400c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2180      	movs	r1, #128	@ 0x80
 8004018:	438a      	bics	r2, r1
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f383 8810 	msr	PRIMASK, r3
}
 8004026:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004028:	f3ef 8310 	mrs	r3, PRIMASK
 800402c:	61bb      	str	r3, [r7, #24]
  return(result);
 800402e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24
 8004032:	2301      	movs	r3, #1
 8004034:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	f383 8810 	msr	PRIMASK, r3
}
 800403c:	46c0      	nop			@ (mov r8, r8)
 800403e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2140      	movs	r1, #64	@ 0x40
 800404a:	430a      	orrs	r2, r1
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	f383 8810 	msr	PRIMASK, r3
}
 8004058:	e006      	b.n	8004068 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 800405a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800405c:	2298      	movs	r2, #152	@ 0x98
 800405e:	589b      	ldr	r3, [r3, r2]
 8004060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004062:	0010      	movs	r0, r2
 8004064:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	46c0      	nop			@ (mov r8, r8)
 800406a:	46bd      	mov	sp, r7
 800406c:	b00c      	add	sp, #48	@ 0x30
 800406e:	bd80      	pop	{r7, pc}

08004070 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2294      	movs	r2, #148	@ 0x94
 8004082:	589b      	ldr	r3, [r3, r2]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	0010      	movs	r0, r2
 8004088:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	46bd      	mov	sp, r7
 800408e:	b004      	add	sp, #16
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b094      	sub	sp, #80	@ 0x50
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2220      	movs	r2, #32
 80040aa:	4013      	ands	r3, r2
 80040ac:	d16f      	bne.n	800418e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80040ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040b0:	225e      	movs	r2, #94	@ 0x5e
 80040b2:	2100      	movs	r1, #0
 80040b4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040b6:	f3ef 8310 	mrs	r3, PRIMASK
 80040ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80040bc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040c0:	2301      	movs	r3, #1
 80040c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f383 8810 	msr	PRIMASK, r3
}
 80040ca:	46c0      	nop			@ (mov r8, r8)
 80040cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	493b      	ldr	r1, [pc, #236]	@ (80041c4 <UART_DMAReceiveCplt+0x130>)
 80040d8:	400a      	ands	r2, r1
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	f383 8810 	msr	PRIMASK, r3
}
 80040e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e8:	f3ef 8310 	mrs	r3, PRIMASK
 80040ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040f2:	2301      	movs	r3, #1
 80040f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f8:	f383 8810 	msr	PRIMASK, r3
}
 80040fc:	46c0      	nop			@ (mov r8, r8)
 80040fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2101      	movs	r1, #1
 800410a:	438a      	bics	r2, r1
 800410c:	609a      	str	r2, [r3, #8]
 800410e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004114:	f383 8810 	msr	PRIMASK, r3
}
 8004118:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800411a:	f3ef 8310 	mrs	r3, PRIMASK
 800411e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004122:	643b      	str	r3, [r7, #64]	@ 0x40
 8004124:	2301      	movs	r3, #1
 8004126:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800412a:	f383 8810 	msr	PRIMASK, r3
}
 800412e:	46c0      	nop			@ (mov r8, r8)
 8004130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2140      	movs	r1, #64	@ 0x40
 800413c:	438a      	bics	r2, r1
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004142:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004146:	f383 8810 	msr	PRIMASK, r3
}
 800414a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800414c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800414e:	228c      	movs	r2, #140	@ 0x8c
 8004150:	2120      	movs	r1, #32
 8004152:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004158:	2b01      	cmp	r3, #1
 800415a:	d118      	bne.n	800418e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800415c:	f3ef 8310 	mrs	r3, PRIMASK
 8004160:	60fb      	str	r3, [r7, #12]
  return(result);
 8004162:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004164:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004166:	2301      	movs	r3, #1
 8004168:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f383 8810 	msr	PRIMASK, r3
}
 8004170:	46c0      	nop			@ (mov r8, r8)
 8004172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2110      	movs	r1, #16
 800417e:	438a      	bics	r2, r1
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004184:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f383 8810 	msr	PRIMASK, r3
}
 800418c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800418e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004190:	2200      	movs	r2, #0
 8004192:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004194:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004198:	2b01      	cmp	r3, #1
 800419a:	d109      	bne.n	80041b0 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800419c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800419e:	22c0      	movs	r2, #192	@ 0xc0
 80041a0:	589b      	ldr	r3, [r3, r2]
 80041a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041a4:	215c      	movs	r1, #92	@ 0x5c
 80041a6:	5a51      	ldrh	r1, [r2, r1]
 80041a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041aa:	0010      	movs	r0, r2
 80041ac:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041ae:	e005      	b.n	80041bc <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 80041b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041b2:	22a0      	movs	r2, #160	@ 0xa0
 80041b4:	589b      	ldr	r3, [r3, r2]
 80041b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041b8:	0010      	movs	r0, r2
 80041ba:	4798      	blx	r3
}
 80041bc:	46c0      	nop			@ (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	b014      	add	sp, #80	@ 0x50
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	fffffeff 	.word	0xfffffeff

080041c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d10b      	bne.n	80041fc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	22c0      	movs	r2, #192	@ 0xc0
 80041e8:	589b      	ldr	r3, [r3, r2]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	215c      	movs	r1, #92	@ 0x5c
 80041ee:	5a52      	ldrh	r2, [r2, r1]
 80041f0:	0852      	lsrs	r2, r2, #1
 80041f2:	b291      	uxth	r1, r2
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	0010      	movs	r0, r2
 80041f8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041fa:	e005      	b.n	8004208 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	229c      	movs	r2, #156	@ 0x9c
 8004200:	589b      	ldr	r3, [r3, r2]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	0010      	movs	r0, r2
 8004206:	4798      	blx	r3
}
 8004208:	46c0      	nop			@ (mov r8, r8)
 800420a:	46bd      	mov	sp, r7
 800420c:	b004      	add	sp, #16
 800420e:	bd80      	pop	{r7, pc}

08004210 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2288      	movs	r2, #136	@ 0x88
 8004222:	589b      	ldr	r3, [r3, r2]
 8004224:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	228c      	movs	r2, #140	@ 0x8c
 800422a:	589b      	ldr	r3, [r3, r2]
 800422c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2280      	movs	r2, #128	@ 0x80
 8004236:	4013      	ands	r3, r2
 8004238:	2b80      	cmp	r3, #128	@ 0x80
 800423a:	d10a      	bne.n	8004252 <UART_DMAError+0x42>
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	2b21      	cmp	r3, #33	@ 0x21
 8004240:	d107      	bne.n	8004252 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2256      	movs	r2, #86	@ 0x56
 8004246:	2100      	movs	r1, #0
 8004248:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	0018      	movs	r0, r3
 800424e:	f7ff fe1b 	bl	8003e88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2240      	movs	r2, #64	@ 0x40
 800425a:	4013      	ands	r3, r2
 800425c:	2b40      	cmp	r3, #64	@ 0x40
 800425e:	d10a      	bne.n	8004276 <UART_DMAError+0x66>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b22      	cmp	r3, #34	@ 0x22
 8004264:	d107      	bne.n	8004276 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	225e      	movs	r2, #94	@ 0x5e
 800426a:	2100      	movs	r1, #0
 800426c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	0018      	movs	r0, r3
 8004272:	f7ff fe49 	bl	8003f08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2290      	movs	r2, #144	@ 0x90
 800427a:	589b      	ldr	r3, [r3, r2]
 800427c:	2210      	movs	r2, #16
 800427e:	431a      	orrs	r2, r3
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2190      	movs	r1, #144	@ 0x90
 8004284:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	22a4      	movs	r2, #164	@ 0xa4
 800428a:	589b      	ldr	r3, [r3, r2]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	0010      	movs	r0, r2
 8004290:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004292:	46c0      	nop			@ (mov r8, r8)
 8004294:	46bd      	mov	sp, r7
 8004296:	b006      	add	sp, #24
 8004298:	bd80      	pop	{r7, pc}

0800429a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	225e      	movs	r2, #94	@ 0x5e
 80042ac:	2100      	movs	r1, #0
 80042ae:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2256      	movs	r2, #86	@ 0x56
 80042b4:	2100      	movs	r1, #0
 80042b6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	22a4      	movs	r2, #164	@ 0xa4
 80042bc:	589b      	ldr	r3, [r3, r2]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	0010      	movs	r0, r2
 80042c2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042c4:	46c0      	nop			@ (mov r8, r8)
 80042c6:	46bd      	mov	sp, r7
 80042c8:	b004      	add	sp, #16
 80042ca:	bd80      	pop	{r7, pc}

080042cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d4:	f3ef 8310 	mrs	r3, PRIMASK
 80042d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80042da:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	2301      	movs	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f383 8810 	msr	PRIMASK, r3
}
 80042e8:	46c0      	nop			@ (mov r8, r8)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2140      	movs	r1, #64	@ 0x40
 80042f6:	438a      	bics	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f383 8810 	msr	PRIMASK, r3
}
 8004304:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2288      	movs	r2, #136	@ 0x88
 800430a:	2120      	movs	r1, #32
 800430c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2298      	movs	r2, #152	@ 0x98
 8004318:	589b      	ldr	r3, [r3, r2]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	0010      	movs	r0, r2
 800431e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004320:	46c0      	nop			@ (mov r8, r8)
 8004322:	46bd      	mov	sp, r7
 8004324:	b006      	add	sp, #24
 8004326:	bd80      	pop	{r7, pc}

08004328 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b094      	sub	sp, #80	@ 0x50
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004330:	204e      	movs	r0, #78	@ 0x4e
 8004332:	183b      	adds	r3, r7, r0
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	2160      	movs	r1, #96	@ 0x60
 8004338:	5a52      	ldrh	r2, [r2, r1]
 800433a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	228c      	movs	r2, #140	@ 0x8c
 8004340:	589b      	ldr	r3, [r3, r2]
 8004342:	2b22      	cmp	r3, #34	@ 0x22
 8004344:	d000      	beq.n	8004348 <UART_RxISR_8BIT+0x20>
 8004346:	e0c2      	b.n	80044ce <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800434e:	214c      	movs	r1, #76	@ 0x4c
 8004350:	187b      	adds	r3, r7, r1
 8004352:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004354:	187b      	adds	r3, r7, r1
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b2da      	uxtb	r2, r3
 800435a:	183b      	adds	r3, r7, r0
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b2d9      	uxtb	r1, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004364:	400a      	ands	r2, r1
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	225e      	movs	r2, #94	@ 0x5e
 8004378:	5a9b      	ldrh	r3, [r3, r2]
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b299      	uxth	r1, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	225e      	movs	r2, #94	@ 0x5e
 8004384:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	225e      	movs	r2, #94	@ 0x5e
 800438a:	5a9b      	ldrh	r3, [r3, r2]
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d000      	beq.n	8004394 <UART_RxISR_8BIT+0x6c>
 8004392:	e0a4      	b.n	80044de <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004394:	f3ef 8310 	mrs	r3, PRIMASK
 8004398:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800439c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800439e:	2301      	movs	r3, #1
 80043a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a4:	f383 8810 	msr	PRIMASK, r3
}
 80043a8:	46c0      	nop			@ (mov r8, r8)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	494c      	ldr	r1, [pc, #304]	@ (80044e8 <UART_RxISR_8BIT+0x1c0>)
 80043b6:	400a      	ands	r2, r1
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c0:	f383 8810 	msr	PRIMASK, r3
}
 80043c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c6:	f3ef 8310 	mrs	r3, PRIMASK
 80043ca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80043cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80043d0:	2301      	movs	r3, #1
 80043d2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d6:	f383 8810 	msr	PRIMASK, r3
}
 80043da:	46c0      	nop			@ (mov r8, r8)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2101      	movs	r1, #1
 80043e8:	438a      	bics	r2, r1
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f2:	f383 8810 	msr	PRIMASK, r3
}
 80043f6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	228c      	movs	r2, #140	@ 0x8c
 80043fc:	2120      	movs	r1, #32
 80043fe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a36      	ldr	r2, [pc, #216]	@ (80044ec <UART_RxISR_8BIT+0x1c4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d01f      	beq.n	8004456 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	2380      	movs	r3, #128	@ 0x80
 800441e:	041b      	lsls	r3, r3, #16
 8004420:	4013      	ands	r3, r2
 8004422:	d018      	beq.n	8004456 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004424:	f3ef 8310 	mrs	r3, PRIMASK
 8004428:	61bb      	str	r3, [r7, #24]
  return(result);
 800442a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800442c:	643b      	str	r3, [r7, #64]	@ 0x40
 800442e:	2301      	movs	r3, #1
 8004430:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f383 8810 	msr	PRIMASK, r3
}
 8004438:	46c0      	nop			@ (mov r8, r8)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	492a      	ldr	r1, [pc, #168]	@ (80044f0 <UART_RxISR_8BIT+0x1c8>)
 8004446:	400a      	ands	r2, r1
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800444c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	f383 8810 	msr	PRIMASK, r3
}
 8004454:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800445a:	2b01      	cmp	r3, #1
 800445c:	d130      	bne.n	80044c0 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004464:	f3ef 8310 	mrs	r3, PRIMASK
 8004468:	60fb      	str	r3, [r7, #12]
  return(result);
 800446a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800446c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800446e:	2301      	movs	r3, #1
 8004470:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f383 8810 	msr	PRIMASK, r3
}
 8004478:	46c0      	nop			@ (mov r8, r8)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2110      	movs	r1, #16
 8004486:	438a      	bics	r2, r1
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800448c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f383 8810 	msr	PRIMASK, r3
}
 8004494:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	2210      	movs	r2, #16
 800449e:	4013      	ands	r3, r2
 80044a0:	2b10      	cmp	r3, #16
 80044a2:	d103      	bne.n	80044ac <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2210      	movs	r2, #16
 80044aa:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	22c0      	movs	r2, #192	@ 0xc0
 80044b0:	589b      	ldr	r3, [r3, r2]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	215c      	movs	r1, #92	@ 0x5c
 80044b6:	5a51      	ldrh	r1, [r2, r1]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	0010      	movs	r0, r2
 80044bc:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044be:	e00e      	b.n	80044de <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	22a0      	movs	r2, #160	@ 0xa0
 80044c4:	589b      	ldr	r3, [r3, r2]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	0010      	movs	r0, r2
 80044ca:	4798      	blx	r3
}
 80044cc:	e007      	b.n	80044de <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2108      	movs	r1, #8
 80044da:	430a      	orrs	r2, r1
 80044dc:	619a      	str	r2, [r3, #24]
}
 80044de:	46c0      	nop			@ (mov r8, r8)
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b014      	add	sp, #80	@ 0x50
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			@ (mov r8, r8)
 80044e8:	fffffedf 	.word	0xfffffedf
 80044ec:	40008000 	.word	0x40008000
 80044f0:	fbffffff 	.word	0xfbffffff

080044f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b094      	sub	sp, #80	@ 0x50
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80044fc:	204e      	movs	r0, #78	@ 0x4e
 80044fe:	183b      	adds	r3, r7, r0
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	2160      	movs	r1, #96	@ 0x60
 8004504:	5a52      	ldrh	r2, [r2, r1]
 8004506:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	228c      	movs	r2, #140	@ 0x8c
 800450c:	589b      	ldr	r3, [r3, r2]
 800450e:	2b22      	cmp	r3, #34	@ 0x22
 8004510:	d000      	beq.n	8004514 <UART_RxISR_16BIT+0x20>
 8004512:	e0c2      	b.n	800469a <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800451a:	214c      	movs	r1, #76	@ 0x4c
 800451c:	187b      	adds	r3, r7, r1
 800451e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004524:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004526:	187b      	adds	r3, r7, r1
 8004528:	183a      	adds	r2, r7, r0
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	8812      	ldrh	r2, [r2, #0]
 800452e:	4013      	ands	r3, r2
 8004530:	b29a      	uxth	r2, r3
 8004532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004534:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453a:	1c9a      	adds	r2, r3, #2
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	225e      	movs	r2, #94	@ 0x5e
 8004544:	5a9b      	ldrh	r3, [r3, r2]
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b299      	uxth	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	225e      	movs	r2, #94	@ 0x5e
 8004550:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	225e      	movs	r2, #94	@ 0x5e
 8004556:	5a9b      	ldrh	r3, [r3, r2]
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d000      	beq.n	8004560 <UART_RxISR_16BIT+0x6c>
 800455e:	e0a4      	b.n	80046aa <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004560:	f3ef 8310 	mrs	r3, PRIMASK
 8004564:	623b      	str	r3, [r7, #32]
  return(result);
 8004566:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004568:	647b      	str	r3, [r7, #68]	@ 0x44
 800456a:	2301      	movs	r3, #1
 800456c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	f383 8810 	msr	PRIMASK, r3
}
 8004574:	46c0      	nop			@ (mov r8, r8)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	494c      	ldr	r1, [pc, #304]	@ (80046b4 <UART_RxISR_16BIT+0x1c0>)
 8004582:	400a      	ands	r2, r1
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004588:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458c:	f383 8810 	msr	PRIMASK, r3
}
 8004590:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004592:	f3ef 8310 	mrs	r3, PRIMASK
 8004596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459a:	643b      	str	r3, [r7, #64]	@ 0x40
 800459c:	2301      	movs	r3, #1
 800459e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a2:	f383 8810 	msr	PRIMASK, r3
}
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2101      	movs	r1, #1
 80045b4:	438a      	bics	r2, r1
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045ba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045be:	f383 8810 	msr	PRIMASK, r3
}
 80045c2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	228c      	movs	r2, #140	@ 0x8c
 80045c8:	2120      	movs	r1, #32
 80045ca:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a36      	ldr	r2, [pc, #216]	@ (80046b8 <UART_RxISR_16BIT+0x1c4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01f      	beq.n	8004622 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	2380      	movs	r3, #128	@ 0x80
 80045ea:	041b      	lsls	r3, r3, #16
 80045ec:	4013      	ands	r3, r2
 80045ee:	d018      	beq.n	8004622 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f0:	f3ef 8310 	mrs	r3, PRIMASK
 80045f4:	617b      	str	r3, [r7, #20]
  return(result);
 80045f6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045fa:	2301      	movs	r3, #1
 80045fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	f383 8810 	msr	PRIMASK, r3
}
 8004604:	46c0      	nop			@ (mov r8, r8)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	492a      	ldr	r1, [pc, #168]	@ (80046bc <UART_RxISR_16BIT+0x1c8>)
 8004612:	400a      	ands	r2, r1
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004618:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f383 8810 	msr	PRIMASK, r3
}
 8004620:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004626:	2b01      	cmp	r3, #1
 8004628:	d130      	bne.n	800468c <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004630:	f3ef 8310 	mrs	r3, PRIMASK
 8004634:	60bb      	str	r3, [r7, #8]
  return(result);
 8004636:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004638:	63bb      	str	r3, [r7, #56]	@ 0x38
 800463a:	2301      	movs	r3, #1
 800463c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f383 8810 	msr	PRIMASK, r3
}
 8004644:	46c0      	nop			@ (mov r8, r8)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2110      	movs	r1, #16
 8004652:	438a      	bics	r2, r1
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004658:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f383 8810 	msr	PRIMASK, r3
}
 8004660:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	2210      	movs	r2, #16
 800466a:	4013      	ands	r3, r2
 800466c:	2b10      	cmp	r3, #16
 800466e:	d103      	bne.n	8004678 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2210      	movs	r2, #16
 8004676:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	22c0      	movs	r2, #192	@ 0xc0
 800467c:	589b      	ldr	r3, [r3, r2]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	215c      	movs	r1, #92	@ 0x5c
 8004682:	5a51      	ldrh	r1, [r2, r1]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	0010      	movs	r0, r2
 8004688:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800468a:	e00e      	b.n	80046aa <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	22a0      	movs	r2, #160	@ 0xa0
 8004690:	589b      	ldr	r3, [r3, r2]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	0010      	movs	r0, r2
 8004696:	4798      	blx	r3
}
 8004698:	e007      	b.n	80046aa <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699a      	ldr	r2, [r3, #24]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2108      	movs	r1, #8
 80046a6:	430a      	orrs	r2, r1
 80046a8:	619a      	str	r2, [r3, #24]
}
 80046aa:	46c0      	nop			@ (mov r8, r8)
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b014      	add	sp, #80	@ 0x50
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	fffffedf 	.word	0xfffffedf
 80046b8:	40008000 	.word	0x40008000
 80046bc:	fbffffff 	.word	0xfbffffff

080046c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b0a0      	sub	sp, #128	@ 0x80
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80046c8:	237a      	movs	r3, #122	@ 0x7a
 80046ca:	18fb      	adds	r3, r7, r3
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	2160      	movs	r1, #96	@ 0x60
 80046d0:	5a52      	ldrh	r2, [r2, r1]
 80046d2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	228c      	movs	r2, #140	@ 0x8c
 80046f0:	589b      	ldr	r3, [r3, r2]
 80046f2:	2b22      	cmp	r3, #34	@ 0x22
 80046f4:	d000      	beq.n	80046f8 <UART_RxISR_8BIT_FIFOEN+0x38>
 80046f6:	e16f      	b.n	80049d8 <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80046f8:	236e      	movs	r3, #110	@ 0x6e
 80046fa:	18fb      	adds	r3, r7, r3
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	2168      	movs	r1, #104	@ 0x68
 8004700:	5a52      	ldrh	r2, [r2, r1]
 8004702:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004704:	e116      	b.n	8004934 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800470c:	216c      	movs	r1, #108	@ 0x6c
 800470e:	187b      	adds	r3, r7, r1
 8004710:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004712:	187b      	adds	r3, r7, r1
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b2da      	uxtb	r2, r3
 8004718:	237a      	movs	r3, #122	@ 0x7a
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	b2d9      	uxtb	r1, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004724:	400a      	ands	r2, r1
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	225e      	movs	r2, #94	@ 0x5e
 8004738:	5a9b      	ldrh	r3, [r3, r2]
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b299      	uxth	r1, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	225e      	movs	r2, #94	@ 0x5e
 8004744:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800474e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004750:	2207      	movs	r2, #7
 8004752:	4013      	ands	r3, r2
 8004754:	d04b      	beq.n	80047ee <UART_RxISR_8BIT_FIFOEN+0x12e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004756:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004758:	2201      	movs	r2, #1
 800475a:	4013      	ands	r3, r2
 800475c:	d010      	beq.n	8004780 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800475e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004760:	2380      	movs	r3, #128	@ 0x80
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4013      	ands	r3, r2
 8004766:	d00b      	beq.n	8004780 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2201      	movs	r2, #1
 800476e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2290      	movs	r2, #144	@ 0x90
 8004774:	589b      	ldr	r3, [r3, r2]
 8004776:	2201      	movs	r2, #1
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2190      	movs	r1, #144	@ 0x90
 800477e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004780:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004782:	2202      	movs	r2, #2
 8004784:	4013      	ands	r3, r2
 8004786:	d00f      	beq.n	80047a8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004788:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800478a:	2201      	movs	r2, #1
 800478c:	4013      	ands	r3, r2
 800478e:	d00b      	beq.n	80047a8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2202      	movs	r2, #2
 8004796:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2290      	movs	r2, #144	@ 0x90
 800479c:	589b      	ldr	r3, [r3, r2]
 800479e:	2204      	movs	r2, #4
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2190      	movs	r1, #144	@ 0x90
 80047a6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047aa:	2204      	movs	r2, #4
 80047ac:	4013      	ands	r3, r2
 80047ae:	d00f      	beq.n	80047d0 <UART_RxISR_8BIT_FIFOEN+0x110>
 80047b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047b2:	2201      	movs	r2, #1
 80047b4:	4013      	ands	r3, r2
 80047b6:	d00b      	beq.n	80047d0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2204      	movs	r2, #4
 80047be:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2290      	movs	r2, #144	@ 0x90
 80047c4:	589b      	ldr	r3, [r3, r2]
 80047c6:	2202      	movs	r2, #2
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2190      	movs	r1, #144	@ 0x90
 80047ce:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2290      	movs	r2, #144	@ 0x90
 80047d4:	589b      	ldr	r3, [r3, r2]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d009      	beq.n	80047ee <UART_RxISR_8BIT_FIFOEN+0x12e>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	22a4      	movs	r2, #164	@ 0xa4
 80047de:	589b      	ldr	r3, [r3, r2]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	0010      	movs	r0, r2
 80047e4:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2290      	movs	r2, #144	@ 0x90
 80047ea:	2100      	movs	r1, #0
 80047ec:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	225e      	movs	r2, #94	@ 0x5e
 80047f2:	5a9b      	ldrh	r3, [r3, r2]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d000      	beq.n	80047fc <UART_RxISR_8BIT_FIFOEN+0x13c>
 80047fa:	e09b      	b.n	8004934 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004800:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8004802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004804:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004806:	2301      	movs	r3, #1
 8004808:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800480c:	f383 8810 	msr	PRIMASK, r3
}
 8004810:	46c0      	nop			@ (mov r8, r8)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4974      	ldr	r1, [pc, #464]	@ (80049f0 <UART_RxISR_8BIT_FIFOEN+0x330>)
 800481e:	400a      	ands	r2, r1
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004824:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004828:	f383 8810 	msr	PRIMASK, r3
}
 800482c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800482e:	f3ef 8310 	mrs	r3, PRIMASK
 8004832:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8004834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004836:	667b      	str	r3, [r7, #100]	@ 0x64
 8004838:	2301      	movs	r3, #1
 800483a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800483e:	f383 8810 	msr	PRIMASK, r3
}
 8004842:	46c0      	nop			@ (mov r8, r8)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4969      	ldr	r1, [pc, #420]	@ (80049f4 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8004850:	400a      	ands	r2, r1
 8004852:	609a      	str	r2, [r3, #8]
 8004854:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004856:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800485a:	f383 8810 	msr	PRIMASK, r3
}
 800485e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	228c      	movs	r2, #140	@ 0x8c
 8004864:	2120      	movs	r1, #32
 8004866:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a5f      	ldr	r2, [pc, #380]	@ (80049f8 <UART_RxISR_8BIT_FIFOEN+0x338>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d01f      	beq.n	80048be <UART_RxISR_8BIT_FIFOEN+0x1fe>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	2380      	movs	r3, #128	@ 0x80
 8004886:	041b      	lsls	r3, r3, #16
 8004888:	4013      	ands	r3, r2
 800488a:	d018      	beq.n	80048be <UART_RxISR_8BIT_FIFOEN+0x1fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488c:	f3ef 8310 	mrs	r3, PRIMASK
 8004890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004894:	663b      	str	r3, [r7, #96]	@ 0x60
 8004896:	2301      	movs	r3, #1
 8004898:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489c:	f383 8810 	msr	PRIMASK, r3
}
 80048a0:	46c0      	nop			@ (mov r8, r8)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4953      	ldr	r1, [pc, #332]	@ (80049fc <UART_RxISR_8BIT_FIFOEN+0x33c>)
 80048ae:	400a      	ands	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048b4:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b8:	f383 8810 	msr	PRIMASK, r3
}
 80048bc:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d130      	bne.n	8004928 <UART_RxISR_8BIT_FIFOEN+0x268>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048cc:	f3ef 8310 	mrs	r3, PRIMASK
 80048d0:	623b      	str	r3, [r7, #32]
  return(result);
 80048d2:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048d6:	2301      	movs	r3, #1
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048dc:	f383 8810 	msr	PRIMASK, r3
}
 80048e0:	46c0      	nop			@ (mov r8, r8)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2110      	movs	r1, #16
 80048ee:	438a      	bics	r2, r1
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f8:	f383 8810 	msr	PRIMASK, r3
}
 80048fc:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	2210      	movs	r2, #16
 8004906:	4013      	ands	r3, r2
 8004908:	2b10      	cmp	r3, #16
 800490a:	d103      	bne.n	8004914 <UART_RxISR_8BIT_FIFOEN+0x254>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2210      	movs	r2, #16
 8004912:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	22c0      	movs	r2, #192	@ 0xc0
 8004918:	589b      	ldr	r3, [r3, r2]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	215c      	movs	r1, #92	@ 0x5c
 800491e:	5a51      	ldrh	r1, [r2, r1]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	0010      	movs	r0, r2
 8004924:	4798      	blx	r3
 8004926:	e005      	b.n	8004934 <UART_RxISR_8BIT_FIFOEN+0x274>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	22a0      	movs	r2, #160	@ 0xa0
 800492c:	589b      	ldr	r3, [r3, r2]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	0010      	movs	r0, r2
 8004932:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004934:	236e      	movs	r3, #110	@ 0x6e
 8004936:	18fb      	adds	r3, r7, r3
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d004      	beq.n	8004948 <UART_RxISR_8BIT_FIFOEN+0x288>
 800493e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004940:	2220      	movs	r2, #32
 8004942:	4013      	ands	r3, r2
 8004944:	d000      	beq.n	8004948 <UART_RxISR_8BIT_FIFOEN+0x288>
 8004946:	e6de      	b.n	8004706 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004948:	205a      	movs	r0, #90	@ 0x5a
 800494a:	183b      	adds	r3, r7, r0
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	215e      	movs	r1, #94	@ 0x5e
 8004950:	5a52      	ldrh	r2, [r2, r1]
 8004952:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004954:	0001      	movs	r1, r0
 8004956:	187b      	adds	r3, r7, r1
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d044      	beq.n	80049e8 <UART_RxISR_8BIT_FIFOEN+0x328>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2268      	movs	r2, #104	@ 0x68
 8004962:	5a9b      	ldrh	r3, [r3, r2]
 8004964:	187a      	adds	r2, r7, r1
 8004966:	8812      	ldrh	r2, [r2, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d23d      	bcs.n	80049e8 <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800496c:	f3ef 8310 	mrs	r3, PRIMASK
 8004970:	60bb      	str	r3, [r7, #8]
  return(result);
 8004972:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004974:	657b      	str	r3, [r7, #84]	@ 0x54
 8004976:	2301      	movs	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f383 8810 	msr	PRIMASK, r3
}
 8004980:	46c0      	nop			@ (mov r8, r8)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	491c      	ldr	r1, [pc, #112]	@ (8004a00 <UART_RxISR_8BIT_FIFOEN+0x340>)
 800498e:	400a      	ands	r2, r1
 8004990:	609a      	str	r2, [r3, #8]
 8004992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004994:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f383 8810 	msr	PRIMASK, r3
}
 800499c:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a18      	ldr	r2, [pc, #96]	@ (8004a04 <UART_RxISR_8BIT_FIFOEN+0x344>)
 80049a2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049a4:	f3ef 8310 	mrs	r3, PRIMASK
 80049a8:	617b      	str	r3, [r7, #20]
  return(result);
 80049aa:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80049ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80049ae:	2301      	movs	r3, #1
 80049b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f383 8810 	msr	PRIMASK, r3
}
 80049b8:	46c0      	nop			@ (mov r8, r8)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2120      	movs	r1, #32
 80049c6:	430a      	orrs	r2, r1
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f383 8810 	msr	PRIMASK, r3
}
 80049d4:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049d6:	e007      	b.n	80049e8 <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2108      	movs	r1, #8
 80049e4:	430a      	orrs	r2, r1
 80049e6:	619a      	str	r2, [r3, #24]
}
 80049e8:	46c0      	nop			@ (mov r8, r8)
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b020      	add	sp, #128	@ 0x80
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	fffffeff 	.word	0xfffffeff
 80049f4:	effffffe 	.word	0xeffffffe
 80049f8:	40008000 	.word	0x40008000
 80049fc:	fbffffff 	.word	0xfbffffff
 8004a00:	efffffff 	.word	0xefffffff
 8004a04:	08004329 	.word	0x08004329

08004a08 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b0a2      	sub	sp, #136	@ 0x88
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004a10:	2382      	movs	r3, #130	@ 0x82
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	2160      	movs	r1, #96	@ 0x60
 8004a18:	5a52      	ldrh	r2, [r2, r1]
 8004a1a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	2284      	movs	r2, #132	@ 0x84
 8004a24:	18ba      	adds	r2, r7, r2
 8004a26:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	228c      	movs	r2, #140	@ 0x8c
 8004a3c:	589b      	ldr	r3, [r3, r2]
 8004a3e:	2b22      	cmp	r3, #34	@ 0x22
 8004a40:	d000      	beq.n	8004a44 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8004a42:	e179      	b.n	8004d38 <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004a44:	2376      	movs	r3, #118	@ 0x76
 8004a46:	18fb      	adds	r3, r7, r3
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	2168      	movs	r1, #104	@ 0x68
 8004a4c:	5a52      	ldrh	r2, [r2, r1]
 8004a4e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004a50:	e11e      	b.n	8004c90 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a58:	2174      	movs	r1, #116	@ 0x74
 8004a5a:	187b      	adds	r3, r7, r1
 8004a5c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a62:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8004a64:	187b      	adds	r3, r7, r1
 8004a66:	2282      	movs	r2, #130	@ 0x82
 8004a68:	18ba      	adds	r2, r7, r2
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	8812      	ldrh	r2, [r2, #0]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a7a:	1c9a      	adds	r2, r3, #2
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	225e      	movs	r2, #94	@ 0x5e
 8004a84:	5a9b      	ldrh	r3, [r3, r2]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b299      	uxth	r1, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	225e      	movs	r2, #94	@ 0x5e
 8004a90:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	2184      	movs	r1, #132	@ 0x84
 8004a9a:	187a      	adds	r2, r7, r1
 8004a9c:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004a9e:	187b      	adds	r3, r7, r1
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2207      	movs	r2, #7
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d050      	beq.n	8004b4a <UART_RxISR_16BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004aa8:	187b      	adds	r3, r7, r1
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2201      	movs	r2, #1
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d010      	beq.n	8004ad4 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8004ab2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004ab4:	2380      	movs	r3, #128	@ 0x80
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d00b      	beq.n	8004ad4 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2290      	movs	r2, #144	@ 0x90
 8004ac8:	589b      	ldr	r3, [r3, r2]
 8004aca:	2201      	movs	r2, #1
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2190      	movs	r1, #144	@ 0x90
 8004ad2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ad4:	2384      	movs	r3, #132	@ 0x84
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2202      	movs	r2, #2
 8004adc:	4013      	ands	r3, r2
 8004ade:	d00f      	beq.n	8004b00 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8004ae0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d00b      	beq.n	8004b00 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2202      	movs	r2, #2
 8004aee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2290      	movs	r2, #144	@ 0x90
 8004af4:	589b      	ldr	r3, [r3, r2]
 8004af6:	2204      	movs	r2, #4
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2190      	movs	r1, #144	@ 0x90
 8004afe:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b00:	2384      	movs	r3, #132	@ 0x84
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2204      	movs	r2, #4
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d00f      	beq.n	8004b2c <UART_RxISR_16BIT_FIFOEN+0x124>
 8004b0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b0e:	2201      	movs	r2, #1
 8004b10:	4013      	ands	r3, r2
 8004b12:	d00b      	beq.n	8004b2c <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2204      	movs	r2, #4
 8004b1a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2290      	movs	r2, #144	@ 0x90
 8004b20:	589b      	ldr	r3, [r3, r2]
 8004b22:	2202      	movs	r2, #2
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2190      	movs	r1, #144	@ 0x90
 8004b2a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2290      	movs	r2, #144	@ 0x90
 8004b30:	589b      	ldr	r3, [r3, r2]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <UART_RxISR_16BIT_FIFOEN+0x142>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	22a4      	movs	r2, #164	@ 0xa4
 8004b3a:	589b      	ldr	r3, [r3, r2]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	0010      	movs	r0, r2
 8004b40:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2290      	movs	r2, #144	@ 0x90
 8004b46:	2100      	movs	r1, #0
 8004b48:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	225e      	movs	r2, #94	@ 0x5e
 8004b4e:	5a9b      	ldrh	r3, [r3, r2]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d000      	beq.n	8004b58 <UART_RxISR_16BIT_FIFOEN+0x150>
 8004b56:	e09b      	b.n	8004c90 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b58:	f3ef 8310 	mrs	r3, PRIMASK
 8004b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b62:	2301      	movs	r3, #1
 8004b64:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b68:	f383 8810 	msr	PRIMASK, r3
}
 8004b6c:	46c0      	nop			@ (mov r8, r8)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4975      	ldr	r1, [pc, #468]	@ (8004d50 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8004b7a:	400a      	ands	r2, r1
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b80:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b84:	f383 8810 	msr	PRIMASK, r3
}
 8004b88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004b90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b94:	2301      	movs	r3, #1
 8004b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b9a:	f383 8810 	msr	PRIMASK, r3
}
 8004b9e:	46c0      	nop			@ (mov r8, r8)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	496a      	ldr	r1, [pc, #424]	@ (8004d54 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8004bac:	400a      	ands	r2, r1
 8004bae:	609a      	str	r2, [r3, #8]
 8004bb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bb2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bb6:	f383 8810 	msr	PRIMASK, r3
}
 8004bba:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	228c      	movs	r2, #140	@ 0x8c
 8004bc0:	2120      	movs	r1, #32
 8004bc2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a60      	ldr	r2, [pc, #384]	@ (8004d58 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d01f      	beq.n	8004c1a <UART_RxISR_16BIT_FIFOEN+0x212>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	2380      	movs	r3, #128	@ 0x80
 8004be2:	041b      	lsls	r3, r3, #16
 8004be4:	4013      	ands	r3, r2
 8004be6:	d018      	beq.n	8004c1a <UART_RxISR_16BIT_FIFOEN+0x212>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bec:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bf0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf8:	f383 8810 	msr	PRIMASK, r3
}
 8004bfc:	46c0      	nop			@ (mov r8, r8)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4954      	ldr	r1, [pc, #336]	@ (8004d5c <UART_RxISR_16BIT_FIFOEN+0x354>)
 8004c0a:	400a      	ands	r2, r1
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c10:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c14:	f383 8810 	msr	PRIMASK, r3
}
 8004c18:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d130      	bne.n	8004c84 <UART_RxISR_16BIT_FIFOEN+0x27c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c28:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c30:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c32:	2301      	movs	r3, #1
 8004c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c38:	f383 8810 	msr	PRIMASK, r3
}
 8004c3c:	46c0      	nop			@ (mov r8, r8)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2110      	movs	r1, #16
 8004c4a:	438a      	bics	r2, r1
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c54:	f383 8810 	msr	PRIMASK, r3
}
 8004c58:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	2210      	movs	r2, #16
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d103      	bne.n	8004c70 <UART_RxISR_16BIT_FIFOEN+0x268>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2210      	movs	r2, #16
 8004c6e:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	22c0      	movs	r2, #192	@ 0xc0
 8004c74:	589b      	ldr	r3, [r3, r2]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	215c      	movs	r1, #92	@ 0x5c
 8004c7a:	5a51      	ldrh	r1, [r2, r1]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	0010      	movs	r0, r2
 8004c80:	4798      	blx	r3
 8004c82:	e005      	b.n	8004c90 <UART_RxISR_16BIT_FIFOEN+0x288>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	22a0      	movs	r2, #160	@ 0xa0
 8004c88:	589b      	ldr	r3, [r3, r2]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	0010      	movs	r0, r2
 8004c8e:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004c90:	2376      	movs	r3, #118	@ 0x76
 8004c92:	18fb      	adds	r3, r7, r3
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d006      	beq.n	8004ca8 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 8004c9a:	2384      	movs	r3, #132	@ 0x84
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d000      	beq.n	8004ca8 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 8004ca6:	e6d4      	b.n	8004a52 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004ca8:	205e      	movs	r0, #94	@ 0x5e
 8004caa:	183b      	adds	r3, r7, r0
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	215e      	movs	r1, #94	@ 0x5e
 8004cb0:	5a52      	ldrh	r2, [r2, r1]
 8004cb2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004cb4:	0001      	movs	r1, r0
 8004cb6:	187b      	adds	r3, r7, r1
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d044      	beq.n	8004d48 <UART_RxISR_16BIT_FIFOEN+0x340>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2268      	movs	r2, #104	@ 0x68
 8004cc2:	5a9b      	ldrh	r3, [r3, r2]
 8004cc4:	187a      	adds	r2, r7, r1
 8004cc6:	8812      	ldrh	r2, [r2, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d23d      	bcs.n	8004d48 <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004cd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f383 8810 	msr	PRIMASK, r3
}
 8004ce0:	46c0      	nop			@ (mov r8, r8)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	491c      	ldr	r1, [pc, #112]	@ (8004d60 <UART_RxISR_16BIT_FIFOEN+0x358>)
 8004cee:	400a      	ands	r2, r1
 8004cf0:	609a      	str	r2, [r3, #8]
 8004cf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f383 8810 	msr	PRIMASK, r3
}
 8004cfc:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a18      	ldr	r2, [pc, #96]	@ (8004d64 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8004d02:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d04:	f3ef 8310 	mrs	r3, PRIMASK
 8004d08:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d0a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004d0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d0e:	2301      	movs	r3, #1
 8004d10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	f383 8810 	msr	PRIMASK, r3
}
 8004d18:	46c0      	nop			@ (mov r8, r8)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2120      	movs	r1, #32
 8004d26:	430a      	orrs	r2, r1
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	f383 8810 	msr	PRIMASK, r3
}
 8004d34:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d36:	e007      	b.n	8004d48 <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2108      	movs	r1, #8
 8004d44:	430a      	orrs	r2, r1
 8004d46:	619a      	str	r2, [r3, #24]
}
 8004d48:	46c0      	nop			@ (mov r8, r8)
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	b022      	add	sp, #136	@ 0x88
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	fffffeff 	.word	0xfffffeff
 8004d54:	effffffe 	.word	0xeffffffe
 8004d58:	40008000 	.word	0x40008000
 8004d5c:	fbffffff 	.word	0xfbffffff
 8004d60:	efffffff 	.word	0xefffffff
 8004d64:	080044f5 	.word	0x080044f5

08004d68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d70:	46c0      	nop			@ (mov r8, r8)
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b002      	add	sp, #8
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004d80:	46c0      	nop			@ (mov r8, r8)
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b002      	add	sp, #8
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004d90:	46c0      	nop			@ (mov r8, r8)
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b002      	add	sp, #8
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2284      	movs	r2, #132	@ 0x84
 8004da4:	5c9b      	ldrb	r3, [r3, r2]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_UARTEx_DisableFifoMode+0x16>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e027      	b.n	8004dfe <HAL_UARTEx_DisableFifoMode+0x66>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2284      	movs	r2, #132	@ 0x84
 8004db2:	2101      	movs	r1, #1
 8004db4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2288      	movs	r2, #136	@ 0x88
 8004dba:	2124      	movs	r1, #36	@ 0x24
 8004dbc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	438a      	bics	r2, r1
 8004dd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8004e08 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2288      	movs	r2, #136	@ 0x88
 8004df0:	2120      	movs	r1, #32
 8004df2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2284      	movs	r2, #132	@ 0x84
 8004df8:	2100      	movs	r1, #0
 8004dfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	0018      	movs	r0, r3
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b004      	add	sp, #16
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	46c0      	nop			@ (mov r8, r8)
 8004e08:	dfffffff 	.word	0xdfffffff

08004e0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2284      	movs	r2, #132	@ 0x84
 8004e1a:	5c9b      	ldrb	r3, [r3, r2]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e02e      	b.n	8004e82 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2284      	movs	r2, #132	@ 0x84
 8004e28:	2101      	movs	r1, #1
 8004e2a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2288      	movs	r2, #136	@ 0x88
 8004e30:	2124      	movs	r1, #36	@ 0x24
 8004e32:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2101      	movs	r1, #1
 8004e48:	438a      	bics	r2, r1
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	08d9      	lsrs	r1, r3, #3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	0018      	movs	r0, r3
 8004e64:	f000 f8bc 	bl	8004fe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2288      	movs	r2, #136	@ 0x88
 8004e74:	2120      	movs	r1, #32
 8004e76:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2284      	movs	r2, #132	@ 0x84
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	0018      	movs	r0, r3
 8004e84:	46bd      	mov	sp, r7
 8004e86:	b004      	add	sp, #16
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2284      	movs	r2, #132	@ 0x84
 8004e9a:	5c9b      	ldrb	r3, [r3, r2]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e02f      	b.n	8004f04 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2284      	movs	r2, #132	@ 0x84
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2288      	movs	r2, #136	@ 0x88
 8004eb0:	2124      	movs	r1, #36	@ 0x24
 8004eb2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	438a      	bics	r2, r1
 8004eca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8004f0c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f000 f87b 	bl	8004fe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2288      	movs	r2, #136	@ 0x88
 8004ef6:	2120      	movs	r1, #32
 8004ef8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2284      	movs	r2, #132	@ 0x84
 8004efe:	2100      	movs	r1, #0
 8004f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b004      	add	sp, #16
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	f1ffffff 	.word	0xf1ffffff

08004f10 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f10:	b5b0      	push	{r4, r5, r7, lr}
 8004f12:	b08a      	sub	sp, #40	@ 0x28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	1dbb      	adds	r3, r7, #6
 8004f1c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	228c      	movs	r2, #140	@ 0x8c
 8004f22:	589b      	ldr	r3, [r3, r2]
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d156      	bne.n	8004fd6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004f2e:	1dbb      	adds	r3, r7, #6
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e04e      	b.n	8004fd8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	2380      	movs	r3, #128	@ 0x80
 8004f40:	015b      	lsls	r3, r3, #5
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d109      	bne.n	8004f5a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d105      	bne.n	8004f5a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2201      	movs	r2, #1
 8004f52:	4013      	ands	r3, r2
 8004f54:	d001      	beq.n	8004f5a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e03e      	b.n	8004fd8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004f66:	2527      	movs	r5, #39	@ 0x27
 8004f68:	197c      	adds	r4, r7, r5
 8004f6a:	1dbb      	adds	r3, r7, #6
 8004f6c:	881a      	ldrh	r2, [r3, #0]
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	0018      	movs	r0, r3
 8004f74:	f7fe fee2 	bl	8003d3c <UART_Start_Receive_DMA>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004f7c:	197b      	adds	r3, r7, r5
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d124      	bne.n	8004fce <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d11c      	bne.n	8004fc6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2210      	movs	r2, #16
 8004f92:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f94:	f3ef 8310 	mrs	r3, PRIMASK
 8004f98:	617b      	str	r3, [r7, #20]
  return(result);
 8004f9a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9c:	623b      	str	r3, [r7, #32]
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	f383 8810 	msr	PRIMASK, r3
}
 8004fa8:	46c0      	nop			@ (mov r8, r8)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2110      	movs	r1, #16
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	f383 8810 	msr	PRIMASK, r3
}
 8004fc4:	e003      	b.n	8004fce <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004fc6:	2327      	movs	r3, #39	@ 0x27
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	2201      	movs	r2, #1
 8004fcc:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004fce:	2327      	movs	r3, #39	@ 0x27
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	e000      	b.n	8004fd8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004fd6:	2302      	movs	r3, #2
  }
}
 8004fd8:	0018      	movs	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b00a      	add	sp, #40	@ 0x28
 8004fde:	bdb0      	pop	{r4, r5, r7, pc}

08004fe0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d108      	bne.n	8005002 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	226a      	movs	r2, #106	@ 0x6a
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2268      	movs	r2, #104	@ 0x68
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005000:	e043      	b.n	800508a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005002:	260f      	movs	r6, #15
 8005004:	19bb      	adds	r3, r7, r6
 8005006:	2208      	movs	r2, #8
 8005008:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800500a:	200e      	movs	r0, #14
 800500c:	183b      	adds	r3, r7, r0
 800500e:	2208      	movs	r2, #8
 8005010:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	0e5b      	lsrs	r3, r3, #25
 800501a:	b2da      	uxtb	r2, r3
 800501c:	240d      	movs	r4, #13
 800501e:	193b      	adds	r3, r7, r4
 8005020:	2107      	movs	r1, #7
 8005022:	400a      	ands	r2, r1
 8005024:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	0f5b      	lsrs	r3, r3, #29
 800502e:	b2da      	uxtb	r2, r3
 8005030:	250c      	movs	r5, #12
 8005032:	197b      	adds	r3, r7, r5
 8005034:	2107      	movs	r1, #7
 8005036:	400a      	ands	r2, r1
 8005038:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800503a:	183b      	adds	r3, r7, r0
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	197a      	adds	r2, r7, r5
 8005040:	7812      	ldrb	r2, [r2, #0]
 8005042:	4914      	ldr	r1, [pc, #80]	@ (8005094 <UARTEx_SetNbDataToProcess+0xb4>)
 8005044:	5c8a      	ldrb	r2, [r1, r2]
 8005046:	435a      	muls	r2, r3
 8005048:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800504a:	197b      	adds	r3, r7, r5
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	4a12      	ldr	r2, [pc, #72]	@ (8005098 <UARTEx_SetNbDataToProcess+0xb8>)
 8005050:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005052:	0019      	movs	r1, r3
 8005054:	f7fb f8e0 	bl	8000218 <__divsi3>
 8005058:	0003      	movs	r3, r0
 800505a:	b299      	uxth	r1, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	226a      	movs	r2, #106	@ 0x6a
 8005060:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005062:	19bb      	adds	r3, r7, r6
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	193a      	adds	r2, r7, r4
 8005068:	7812      	ldrb	r2, [r2, #0]
 800506a:	490a      	ldr	r1, [pc, #40]	@ (8005094 <UARTEx_SetNbDataToProcess+0xb4>)
 800506c:	5c8a      	ldrb	r2, [r1, r2]
 800506e:	435a      	muls	r2, r3
 8005070:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005072:	193b      	adds	r3, r7, r4
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	4a08      	ldr	r2, [pc, #32]	@ (8005098 <UARTEx_SetNbDataToProcess+0xb8>)
 8005078:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800507a:	0019      	movs	r1, r3
 800507c:	f7fb f8cc 	bl	8000218 <__divsi3>
 8005080:	0003      	movs	r3, r0
 8005082:	b299      	uxth	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2268      	movs	r2, #104	@ 0x68
 8005088:	5299      	strh	r1, [r3, r2]
}
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	46bd      	mov	sp, r7
 800508e:	b005      	add	sp, #20
 8005090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005092:	46c0      	nop			@ (mov r8, r8)
 8005094:	080051cc 	.word	0x080051cc
 8005098:	080051d4 	.word	0x080051d4

0800509c <memset>:
 800509c:	0003      	movs	r3, r0
 800509e:	1882      	adds	r2, r0, r2
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d100      	bne.n	80050a6 <memset+0xa>
 80050a4:	4770      	bx	lr
 80050a6:	7019      	strb	r1, [r3, #0]
 80050a8:	3301      	adds	r3, #1
 80050aa:	e7f9      	b.n	80050a0 <memset+0x4>

080050ac <__libc_init_array>:
 80050ac:	b570      	push	{r4, r5, r6, lr}
 80050ae:	2600      	movs	r6, #0
 80050b0:	4c0c      	ldr	r4, [pc, #48]	@ (80050e4 <__libc_init_array+0x38>)
 80050b2:	4d0d      	ldr	r5, [pc, #52]	@ (80050e8 <__libc_init_array+0x3c>)
 80050b4:	1b64      	subs	r4, r4, r5
 80050b6:	10a4      	asrs	r4, r4, #2
 80050b8:	42a6      	cmp	r6, r4
 80050ba:	d109      	bne.n	80050d0 <__libc_init_array+0x24>
 80050bc:	2600      	movs	r6, #0
 80050be:	f000 f819 	bl	80050f4 <_init>
 80050c2:	4c0a      	ldr	r4, [pc, #40]	@ (80050ec <__libc_init_array+0x40>)
 80050c4:	4d0a      	ldr	r5, [pc, #40]	@ (80050f0 <__libc_init_array+0x44>)
 80050c6:	1b64      	subs	r4, r4, r5
 80050c8:	10a4      	asrs	r4, r4, #2
 80050ca:	42a6      	cmp	r6, r4
 80050cc:	d105      	bne.n	80050da <__libc_init_array+0x2e>
 80050ce:	bd70      	pop	{r4, r5, r6, pc}
 80050d0:	00b3      	lsls	r3, r6, #2
 80050d2:	58eb      	ldr	r3, [r5, r3]
 80050d4:	4798      	blx	r3
 80050d6:	3601      	adds	r6, #1
 80050d8:	e7ee      	b.n	80050b8 <__libc_init_array+0xc>
 80050da:	00b3      	lsls	r3, r6, #2
 80050dc:	58eb      	ldr	r3, [r5, r3]
 80050de:	4798      	blx	r3
 80050e0:	3601      	adds	r6, #1
 80050e2:	e7f2      	b.n	80050ca <__libc_init_array+0x1e>
 80050e4:	080051e4 	.word	0x080051e4
 80050e8:	080051e4 	.word	0x080051e4
 80050ec:	080051e8 	.word	0x080051e8
 80050f0:	080051e4 	.word	0x080051e4

080050f4 <_init>:
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fa:	bc08      	pop	{r3}
 80050fc:	469e      	mov	lr, r3
 80050fe:	4770      	bx	lr

08005100 <_fini>:
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	46c0      	nop			@ (mov r8, r8)
 8005104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005106:	bc08      	pop	{r3}
 8005108:	469e      	mov	lr, r3
 800510a:	4770      	bx	lr
